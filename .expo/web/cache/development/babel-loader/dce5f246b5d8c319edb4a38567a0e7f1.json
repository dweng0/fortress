{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\StackViewLayout.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport clamp from \"../../utils/clamp\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { SceneView, StackActions, NavigationActions, withOrientation, NavigationProvider } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\nimport Card from \"./StackViewCard\";\nimport Header from \"../Header/Header\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nimport { supportsImprovedSpringAnimation } from \"../../utils/ReactNativeFeatures\";\n\nvar emptyFunction = () => {};\n\nvar IPHONE_XS_HEIGHT = 812;\nvar IPHONE_XR_HEIGHT = 896;\nvar {\n  width: WINDOW_WIDTH,\n  height: WINDOW_HEIGHT\n} = Dimensions.get('window');\nvar IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\nvar EaseInOut = Easing.inOut(Easing.ease);\nvar HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\nvar HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\nvar ANIMATION_DURATION = 500;\nvar POSITION_THRESHOLD = 1 / 2;\nvar RESPOND_THRESHOLD = 20;\nvar GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nvar GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nvar animatedSubscribeValue = animatedValue => {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nvar getDefaultHeaderHeight = isLandscape => {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nclass StackViewLayout extends React.Component {\n  constructor(props) {\n    super(props);\n    this._gestureStartValue = 0;\n    this._isResponding = false;\n    this._immediateIndex = null;\n    this._panResponder = PanResponder.create({\n      onPanResponderTerminate: () => {\n        var {\n          navigation\n        } = this.props.transitionProps;\n        var {\n          index\n        } = navigation.state;\n        this._isResponding = false;\n\n        this._reset(index, 0);\n\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      },\n      onPanResponderGrant: () => {\n        var {\n          transitionProps: {\n            navigation,\n            position,\n            scene\n          }\n        } = this.props;\n        var {\n          index\n        } = navigation.state;\n\n        if (index !== scene.index) {\n          return false;\n        }\n\n        position.stopAnimation(value => {\n          this._isResponding = true;\n          this._gestureStartValue = value;\n        });\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      },\n      onMoveShouldSetPanResponder: (event, gesture) => {\n        var {\n          transitionProps: {\n            navigation,\n            layout,\n            scene\n          },\n          mode\n        } = this.props;\n        var {\n          index\n        } = navigation.state;\n        var isVertical = mode === 'modal';\n        var {\n          options\n        } = scene.descriptor;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n        if (index !== scene.index) {\n          return false;\n        }\n\n        var immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n        var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n        var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n        var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var axisHasBeenMeasured = !!axisLength;\n        var screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n        var {\n          gestureResponseDistance: userGestureResponseDistance = {}\n        } = options;\n        var gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n\n        if (screenEdgeDistance > gestureResponseDistance) {\n          return false;\n        }\n\n        var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n        var isOnFirstCard = immediateIndex === 0;\n        var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n        return shouldSetResponder;\n      },\n      onPanResponderMove: (event, gesture) => {\n        var {\n          transitionProps: {\n            navigation,\n            position,\n            layout,\n            scene\n          },\n          mode\n        } = this.props;\n        var {\n          index\n        } = navigation.state;\n        var isVertical = mode === 'modal';\n        var {\n          options\n        } = scene.descriptor;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n        var startValue = this._gestureStartValue;\n        var axis = isVertical ? 'dy' : 'dx';\n        var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n        var value = clamp(index - 1, currentValue, index);\n        position.setValue(value);\n      },\n      onPanResponderTerminationRequest: () => false,\n      onPanResponderRelease: (event, gesture) => {\n        var {\n          transitionProps: {\n            navigation,\n            position,\n            layout,\n            scene\n          },\n          mode\n        } = this.props;\n        var {\n          index\n        } = navigation.state;\n        var isVertical = mode === 'modal';\n        var {\n          options\n        } = scene.descriptor;\n        var gestureDirection = options.gestureDirection;\n        var gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n        if (!this._isResponding) {\n          return;\n        }\n\n        this._isResponding = false;\n        var immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n        var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n        var movementDirection = gestureDirectionInverted ? -1 : 1;\n        var movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n        var gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n        var defaultVelocity = axisDistance / ANIMATION_DURATION;\n        var velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n        var resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n        var goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n        position.stopAnimation(value => {\n          if (gestureVelocity < -0.5) {\n            this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n            this._reset(immediateIndex, resetDuration);\n\n            return;\n          }\n\n          if (gestureVelocity > 0.5) {\n            this.props.onGestureFinish && this.props.onGestureFinish();\n\n            this._goBack(immediateIndex, goBackDuration);\n\n            return;\n          }\n\n          if (value <= index - POSITION_THRESHOLD) {\n            this.props.onGestureFinish && this.props.onGestureFinish();\n\n            this._goBack(immediateIndex, goBackDuration);\n          } else {\n            this.props.onGestureCanceled && this.props.onGestureCanceled();\n\n            this._reset(immediateIndex, resetDuration);\n          }\n        });\n      }\n    });\n\n    this._onFloatingHeaderLayout = e => {\n      this.setState({\n        floatingHeaderHeight: e.nativeEvent.layout.height\n      });\n    };\n\n    this._getTransitionConfig = () => {\n      var isModal = this.props.mode === 'modal';\n      return TransitionConfigs.getTransitionConfig(this.props.transitionConfig, this.props.transitionProps, this.props.lastTransitionProps, isModal);\n    };\n\n    this._renderCard = scene => {\n      var {\n        screenInterpolator\n      } = this._getTransitionConfig();\n\n      var style = screenInterpolator && screenInterpolator(_objectSpread({}, this.props.transitionProps, {\n        scene\n      }));\n      var {\n        options\n      } = scene.descriptor;\n      var hasHeader = options.header !== null;\n\n      var headerMode = this._getHeaderMode();\n\n      var paddingTop = 0;\n\n      if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n        paddingTop = this.state.floatingHeaderHeight;\n      }\n\n      return React.createElement(Card, _extends({}, this.props.transitionProps, {\n        key: \"card_\".concat(scene.key),\n        transparent: this.props.transparentCard,\n        style: [style, {\n          paddingTop\n        }, this.props.cardStyle],\n        scene: scene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        }\n      }), this._renderInnerScene(scene));\n    };\n\n    this.state = {\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n  }\n\n  _renderHeader(scene, headerMode) {\n    var {\n      options\n    } = scene.descriptor;\n    var {\n      header\n    } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(\"Invalid header value: \\\"\".concat(header, \"\\\". The header option must be a valid React component or null, not a string.\"));\n    }\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    var renderHeader = header || (props => React.createElement(Header, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      }\n    })));\n\n    var {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator\n    } = this._getTransitionConfig();\n\n    var _this$props = this.props,\n        {\n      transitionProps\n    } = _this$props,\n        passProps = _objectWithoutProperties(_this$props, [\"transitionProps\"]);\n\n    return React.createElement(NavigationProvider, {\n      value: scene.descriptor.navigation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      }\n    }, renderHeader(_objectSpread({}, passProps, {}, transitionProps, {\n      scene,\n      mode: headerMode,\n      transitionPreset: this._getHeaderTransitionPreset(),\n      layoutPreset: this._getHeaderLayoutPreset(),\n      backTitleVisible: this._getheaderBackTitleVisible(),\n      leftInterpolator: headerLeftInterpolator,\n      titleInterpolator: headerTitleInterpolator,\n      rightInterpolator: headerRightInterpolator,\n      backgroundInterpolator: headerBackgroundInterpolator\n    })));\n  }\n\n  _animatedSubscribe(props) {\n    animatedSubscribeValue(props.transitionProps.layout.width);\n    animatedSubscribeValue(props.transitionProps.layout.height);\n    animatedSubscribeValue(props.transitionProps.position);\n  }\n\n  _reset(resetToIndex, duration) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    } else {\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    }\n  }\n\n  _goBack(backFromIndex, duration) {\n    var {\n      navigation,\n      position,\n      scenes\n    } = this.props.transitionProps;\n    var toValue = Math.max(backFromIndex - 1, 0);\n    this._immediateIndex = toValue;\n\n    var onCompleteAnimation = () => {\n      this._immediateIndex = null;\n      var backFromScene = scenes.find(s => s.index === toValue + 1);\n\n      if (!this._isResponding && backFromScene) {\n        navigation.dispatch(NavigationActions.back({\n          key: backFromScene.route.key,\n          immediate: true\n        }));\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(position, {\n        toValue,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    } else {\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  render() {\n    var floatingHeader = null;\n\n    var headerMode = this._getHeaderMode();\n\n    if (headerMode === 'float') {\n      var {\n        scene: _scene\n      } = this.props.transitionProps;\n      floatingHeader = React.createElement(View, {\n        style: styles.floatingHeader,\n        pointerEvents: \"box-none\",\n        onLayout: this._onFloatingHeaderLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        }\n      }, this._renderHeader(_scene, headerMode));\n    }\n\n    var {\n      transitionProps: {\n        scene,\n        scenes\n      }\n    } = this.props;\n    var {\n      options\n    } = scene.descriptor;\n    var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : Platform.OS === 'ios';\n    var responder = !gesturesEnabled ? null : this._panResponder;\n    var handlers = gesturesEnabled ? responder.panHandlers : {};\n    var containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n    return React.createElement(View, _extends({}, handlers, {\n      style: containerStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      }\n    }), React.createElement(ScreenContainer, {\n      style: styles.scenes,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      }\n    }, scenes.map(s => this._renderCard(s))), floatingHeader);\n  }\n\n  _getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n\n    return 'float';\n  }\n\n  _getHeaderLayoutPreset() {\n    var {\n      headerLayoutPreset\n    } = this.props;\n\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n          console.warn(\"headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'\");\n        }\n      }\n\n      if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\"Invalid configuration applied for headerLayoutPreset - expected one of \".concat(HEADER_LAYOUT_PRESET_VALUES.join(', '), \" but received \").concat(JSON.stringify(headerLayoutPreset)));\n      }\n    }\n\n    if (Platform.OS === 'android') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  _getHeaderTransitionPreset() {\n    if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    var {\n      headerTransitionPreset\n    } = this.props;\n\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(\"Invalid configuration applied for headerTransitionPreset - expected one of \".concat(HEADER_TRANSITION_PRESET_VALUES.join(', '), \" but received \").concat(JSON.stringify(headerTransitionPreset)));\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  _getheaderBackTitleVisible() {\n    var {\n      headerBackTitleVisible\n    } = this.props;\n    return headerBackTitleVisible;\n  }\n\n  _renderInnerScene(scene) {\n    var {\n      navigation,\n      getComponent\n    } = scene.descriptor;\n    var SceneComponent = getComponent();\n    var {\n      screenProps\n    } = this.props;\n\n    var headerMode = this._getHeaderMode();\n\n    if (headerMode === 'screen') {\n      return React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        }\n      }, React.createElement(View, {\n        style: styles.scenes,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        }\n      }, React.createElement(SceneView, {\n        screenProps: screenProps,\n        navigation: navigation,\n        component: SceneComponent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 478\n        }\n      })), this._renderHeader(scene, headerMode));\n    }\n\n    return React.createElement(SceneView, {\n      screenProps: screenProps,\n      navigation: navigation,\n      component: SceneComponent,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483\n      }\n    });\n  }\n\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\nexport default withOrientation(StackViewLayout);","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/StackView/StackViewLayout.js"],"names":["React","clamp","SceneView","StackActions","NavigationActions","withOrientation","NavigationProvider","ScreenContainer","Card","Header","TransitionConfigs","supportsImprovedSpringAnimation","emptyFunction","IPHONE_XS_HEIGHT","IPHONE_XR_HEIGHT","width","WINDOW_WIDTH","height","WINDOW_HEIGHT","Dimensions","get","IS_IPHONE_X","Platform","OS","isPad","isTVOS","EaseInOut","Easing","inOut","ease","HEADER_LAYOUT_PRESET_VALUES","HEADER_TRANSITION_PRESET_VALUES","ANIMATION_DURATION","POSITION_THRESHOLD","RESPOND_THRESHOLD","GESTURE_RESPONSE_DISTANCE_HORIZONTAL","GESTURE_RESPONSE_DISTANCE_VERTICAL","animatedSubscribeValue","animatedValue","__isNative","Object","keys","_listeners","length","addListener","getDefaultHeaderHeight","isLandscape","StackViewLayout","Component","constructor","props","_gestureStartValue","_isResponding","_immediateIndex","_panResponder","PanResponder","create","onPanResponderTerminate","navigation","transitionProps","index","state","_reset","onGestureCanceled","onPanResponderGrant","position","scene","stopAnimation","value","onGestureBegin","onMoveShouldSetPanResponder","event","gesture","layout","mode","isVertical","options","descriptor","gestureDirection","gestureDirectionInverted","I18nManager","isRTL","immediateIndex","currentDragDistance","currentDragPosition","nativeEvent","axisLength","__getValue","axisHasBeenMeasured","screenEdgeDistance","gestureResponseDistance","userGestureResponseDistance","vertical","horizontal","hasDraggedEnough","Math","abs","isOnFirstCard","shouldSetResponder","onPanResponderMove","startValue","axis","axisDistance","currentValue","setValue","onPanResponderTerminationRequest","onPanResponderRelease","movementDirection","movedDistance","gestureVelocity","defaultVelocity","velocity","max","resetDuration","goBackDuration","onGestureFinish","_goBack","_onFloatingHeaderLayout","e","setState","floatingHeaderHeight","_getTransitionConfig","isModal","getTransitionConfig","transitionConfig","lastTransitionProps","_renderCard","screenInterpolator","style","hasHeader","header","headerMode","_getHeaderMode","paddingTop","headerTransparent","key","transparentCard","cardStyle","_renderInnerScene","_renderHeader","__DEV__","Error","isValidElement","renderHeader","headerLeftInterpolator","headerTitleInterpolator","headerRightInterpolator","headerBackgroundInterpolator","passProps","transitionPreset","_getHeaderTransitionPreset","layoutPreset","_getHeaderLayoutPreset","backTitleVisible","_getheaderBackTitleVisible","leftInterpolator","titleInterpolator","rightInterpolator","backgroundInterpolator","_animatedSubscribe","resetToIndex","duration","Animated","spring","toValue","stiffness","damping","mass","useNativeDriver","start","timing","easing","backFromIndex","scenes","onCompleteAnimation","backFromScene","find","s","dispatch","back","route","immediate","completeTransition","render","floatingHeader","styles","gesturesEnabled","responder","handlers","panHandlers","containerStyle","container","map","headerLayoutPreset","console","warn","includes","error","join","JSON","stringify","headerTransitionPreset","headerBackTitleVisible","getComponent","SceneComponent","screenProps","StyleSheet","flex","flexDirection","overflow","left","top","right"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport clamp from '../../utils/clamp';\nimport { Animated, StyleSheet, PanResponder, Platform, View, I18nManager, Easing, Dimensions } from 'react-native';\nimport { SceneView, StackActions, NavigationActions, withOrientation, NavigationProvider } from 'react-navigation';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport Card from './StackViewCard';\nimport Header from '../Header/Header';\n\nimport TransitionConfigs from './StackViewTransitionConfigs';\nimport { supportsImprovedSpringAnimation } from '../../utils/ReactNativeFeatures';\n\nconst emptyFunction = () => {};\n\nconst IPHONE_XS_HEIGHT = 812; // iPhone X and XS\nconst IPHONE_XR_HEIGHT = 896; // iPhone XR and XS Max\nconst { width: WINDOW_WIDTH, height: WINDOW_HEIGHT } = Dimensions.get('window');\nconst IS_IPHONE_X = Platform.OS === 'ios' && !Platform.isPad && !Platform.isTVOS && (WINDOW_HEIGHT === IPHONE_XS_HEIGHT || WINDOW_WIDTH === IPHONE_XS_HEIGHT || WINDOW_HEIGHT === IPHONE_XR_HEIGHT || WINDOW_WIDTH === IPHONE_XR_HEIGHT);\n\nconst EaseInOut = Easing.inOut(Easing.ease);\n\n/**\n * Enumerate possible values for validation\n */\nconst HEADER_LAYOUT_PRESET_VALUES = ['center', 'left'];\nconst HEADER_TRANSITION_PRESET_VALUES = ['uikit', 'fade-in-place'];\n\n/**\n * The max duration of the card animation in milliseconds after released gesture.\n * The actual duration should be always less then that because the rest distance\n * is always less then the full distance of the layout.\n */\nconst ANIMATION_DURATION = 500;\n\n/**\n * The gesture distance threshold to trigger the back behavior. For instance,\n * `1/2` means that moving greater than 1/2 of the width of the screen will\n * trigger a back action\n */\nconst POSITION_THRESHOLD = 1 / 2;\n\n/**\n * The threshold (in pixels) to start the gesture action.\n */\nconst RESPOND_THRESHOLD = 20;\n\n/**\n * The distance of touch start from the edge of the screen where the gesture will be recognized\n */\nconst GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;\nconst GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;\n\nconst animatedSubscribeValue = animatedValue => {\n  if (!animatedValue.__isNative) {\n    return;\n  }\n  if (Object.keys(animatedValue._listeners).length === 0) {\n    animatedValue.addListener(emptyFunction);\n  }\n};\n\nconst getDefaultHeaderHeight = isLandscape => {\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      return 32;\n    } else if (IS_IPHONE_X) {\n      return 88;\n    } else {\n      return 64;\n    }\n  } else {\n    return 56;\n  }\n};\n\nclass StackViewLayout extends React.Component {\n  /**\n   * Used to identify the starting point of the position when the gesture starts, such that it can\n   * be updated according to its relative position. This means that a card can effectively be\n   * \"caught\"- If a gesture starts while a card is animating, the card does not jump into a\n   * corresponding location for the touch.\n   */\n  _gestureStartValue = 0;\n\n  // tracks if a touch is currently happening\n  _isResponding = false;\n\n  /**\n   * immediateIndex is used to represent the expected index that we will be on after a\n   * transition. To achieve a smooth animation when swiping back, the action to go back\n   * doesn't actually fire until the transition completes. The immediateIndex is used during\n   * the transition so that gestures can be handled correctly. This is a work-around for\n   * cases when the user quickly swipes back several times.\n   */\n  _immediateIndex = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      floatingHeaderHeight: getDefaultHeaderHeight(props.isLandscape)\n    };\n  }\n\n  _renderHeader(scene, headerMode) {\n    const { options } = scene.descriptor;\n    const { header } = options;\n\n    if (__DEV__ && typeof header === 'string') {\n      throw new Error(`Invalid header value: \"${header}\". The header option must be a valid React component or null, not a string.`);\n    }\n\n    if (header === null && headerMode === 'screen') {\n      return null;\n    }\n\n    // check if it's a react element\n    if (React.isValidElement(header)) {\n      return header;\n    }\n\n    // Handle the case where the header option is a function, and provide the default\n    const renderHeader = header || (props => <Header {...props} />);\n\n    const {\n      headerLeftInterpolator,\n      headerTitleInterpolator,\n      headerRightInterpolator,\n      headerBackgroundInterpolator\n    } = this._getTransitionConfig();\n\n    const { transitionProps, ...passProps } = this.props;\n\n    return <NavigationProvider value={scene.descriptor.navigation}>\n        {renderHeader({\n        ...passProps,\n        ...transitionProps,\n        scene,\n        mode: headerMode,\n        transitionPreset: this._getHeaderTransitionPreset(),\n        layoutPreset: this._getHeaderLayoutPreset(),\n        backTitleVisible: this._getheaderBackTitleVisible(),\n        leftInterpolator: headerLeftInterpolator,\n        titleInterpolator: headerTitleInterpolator,\n        rightInterpolator: headerRightInterpolator,\n        backgroundInterpolator: headerBackgroundInterpolator\n      })}\n      </NavigationProvider>;\n  }\n\n  _animatedSubscribe(props) {\n    // Hack to make this work with native driven animations. We add a single listener\n    // so the JS value of the following animated values gets updated. We rely on\n    // some Animated private APIs and not doing so would require using a bunch of\n    // value listeners but we'd have to remove them to not leak and I'm not sure\n    // when we'd do that with the current structure we have. `stopAnimation` callback\n    // is also broken with native animated values that have no listeners so if we\n    // want to remove this we have to fix this too.\n    animatedSubscribeValue(props.transitionProps.layout.width);\n    animatedSubscribeValue(props.transitionProps.layout.height);\n    animatedSubscribeValue(props.transitionProps.position);\n  }\n\n  _reset(resetToIndex, duration) {\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    } else {\n      Animated.timing(this.props.transitionProps.position, {\n        toValue: resetToIndex,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: this.props.transitionProps.position.__isNative\n      }).start();\n    }\n  }\n\n  _goBack(backFromIndex, duration) {\n    const { navigation, position, scenes } = this.props.transitionProps;\n    const toValue = Math.max(backFromIndex - 1, 0);\n\n    // set temporary index for gesture handler to respect until the action is\n    // dispatched at the end of the transition.\n    this._immediateIndex = toValue;\n\n    const onCompleteAnimation = () => {\n      this._immediateIndex = null;\n      const backFromScene = scenes.find(s => s.index === toValue + 1);\n      if (!this._isResponding && backFromScene) {\n        navigation.dispatch(NavigationActions.back({\n          key: backFromScene.route.key,\n          immediate: true\n        }));\n        navigation.dispatch(StackActions.completeTransition());\n      }\n    };\n\n    if (Platform.OS === 'ios' && supportsImprovedSpringAnimation()) {\n      Animated.spring(position, {\n        toValue,\n        stiffness: 5000,\n        damping: 600,\n        mass: 3,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    } else {\n      Animated.timing(position, {\n        toValue,\n        duration,\n        easing: EaseInOut,\n        useNativeDriver: position.__isNative\n      }).start(onCompleteAnimation);\n    }\n  }\n\n  _panResponder = PanResponder.create({\n    onPanResponderTerminate: () => {\n      const { navigation } = this.props.transitionProps;\n      const { index } = navigation.state;\n      this._isResponding = false;\n      this._reset(index, 0);\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    },\n    onPanResponderGrant: () => {\n      const {\n        transitionProps: { navigation, position, scene }\n      } = this.props;\n      const { index } = navigation.state;\n\n      if (index !== scene.index) {\n        return false;\n      }\n\n      position.stopAnimation(value => {\n        this._isResponding = true;\n        this._gestureStartValue = value;\n      });\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    },\n    onMoveShouldSetPanResponder: (event, gesture) => {\n      const {\n        transitionProps: { navigation, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      if (index !== scene.index) {\n        return false;\n      }\n\n      const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n      const currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];\n      const currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];\n      const axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const axisHasBeenMeasured = !!axisLength;\n\n      // Measure the distance from the touch to the edge of the screen\n      const screenEdgeDistance = gestureDirectionInverted ? axisLength - (currentDragPosition - currentDragDistance) : currentDragPosition - currentDragDistance;\n      // Compare to the gesture distance relavant to card or modal\n\n      const {\n        gestureResponseDistance: userGestureResponseDistance = {}\n      } = options;\n      const gestureResponseDistance = isVertical ? userGestureResponseDistance.vertical || GESTURE_RESPONSE_DISTANCE_VERTICAL : userGestureResponseDistance.horizontal || GESTURE_RESPONSE_DISTANCE_HORIZONTAL;\n      // GESTURE_RESPONSE_DISTANCE is about 25 or 30. Or 135 for modals\n      if (screenEdgeDistance > gestureResponseDistance) {\n        // Reject touches that started in the middle of the screen\n        return false;\n      }\n\n      const hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;\n\n      const isOnFirstCard = immediateIndex === 0;\n      const shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;\n      return shouldSetResponder;\n    },\n    onPanResponderMove: (event, gesture) => {\n      const {\n        transitionProps: { navigation, position, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      // Handle the moving touches for our granted responder\n      const startValue = this._gestureStartValue;\n      const axis = isVertical ? 'dy' : 'dx';\n      const axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const currentValue = axis === 'dx' && gestureDirectionInverted ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;\n      const value = clamp(index - 1, currentValue, index);\n      position.setValue(value);\n    },\n    onPanResponderTerminationRequest: () =>\n    // Returning false will prevent other views from becoming responder while\n    // the navigation view is the responder (mid-gesture)\n    false,\n    onPanResponderRelease: (event, gesture) => {\n      const {\n        transitionProps: { navigation, position, layout, scene },\n        mode\n      } = this.props;\n      const { index } = navigation.state;\n      const isVertical = mode === 'modal';\n      const { options } = scene.descriptor;\n      const gestureDirection = options.gestureDirection;\n\n      const gestureDirectionInverted = typeof gestureDirection === 'string' ? gestureDirection === 'inverted' : I18nManager.isRTL;\n\n      if (!this._isResponding) {\n        return;\n      }\n      this._isResponding = false;\n\n      const immediateIndex = this._immediateIndex == null ? index : this._immediateIndex;\n\n      // Calculate animate duration according to gesture speed and moved distance\n      const axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();\n      const movementDirection = gestureDirectionInverted ? -1 : 1;\n      const movedDistance = movementDirection * gesture[isVertical ? 'dy' : 'dx'];\n      const gestureVelocity = movementDirection * gesture[isVertical ? 'vy' : 'vx'];\n      const defaultVelocity = axisDistance / ANIMATION_DURATION;\n      const velocity = Math.max(Math.abs(gestureVelocity), defaultVelocity);\n      const resetDuration = gestureDirectionInverted ? (axisDistance - movedDistance) / velocity : movedDistance / velocity;\n      const goBackDuration = gestureDirectionInverted ? movedDistance / velocity : (axisDistance - movedDistance) / velocity;\n\n      // To asyncronously get the current animated value, we need to run stopAnimation:\n      position.stopAnimation(value => {\n        // If the speed of the gesture release is significant, use that as the indication\n        // of intent\n        if (gestureVelocity < -0.5) {\n          this.props.onGestureCanceled && this.props.onGestureCanceled();\n          this._reset(immediateIndex, resetDuration);\n          return;\n        }\n        if (gestureVelocity > 0.5) {\n          this.props.onGestureFinish && this.props.onGestureFinish();\n          this._goBack(immediateIndex, goBackDuration);\n          return;\n        }\n\n        // Then filter based on the distance the screen was moved. Over a third of the way swiped,\n        // and the back will happen.\n        if (value <= index - POSITION_THRESHOLD) {\n          this.props.onGestureFinish && this.props.onGestureFinish();\n          this._goBack(immediateIndex, goBackDuration);\n        } else {\n          this.props.onGestureCanceled && this.props.onGestureCanceled();\n          this._reset(immediateIndex, resetDuration);\n        }\n      });\n    }\n  });\n\n  _onFloatingHeaderLayout = e => {\n    this.setState({ floatingHeaderHeight: e.nativeEvent.layout.height });\n  };\n\n  render() {\n    let floatingHeader = null;\n    const headerMode = this._getHeaderMode();\n\n    if (headerMode === 'float') {\n      const { scene } = this.props.transitionProps;\n      floatingHeader = <View style={styles.floatingHeader} pointerEvents=\"box-none\" onLayout={this._onFloatingHeaderLayout}>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n    const {\n      transitionProps: { scene, scenes }\n    } = this.props;\n    const { options } = scene.descriptor;\n\n    const gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : Platform.OS === 'ios';\n\n    const responder = !gesturesEnabled ? null : this._panResponder;\n\n    const handlers = gesturesEnabled ? responder.panHandlers : {};\n    const containerStyle = [styles.container, this._getTransitionConfig().containerStyle];\n\n    return <View {...handlers} style={containerStyle}>\n        <ScreenContainer style={styles.scenes}>\n          {scenes.map(s => this._renderCard(s))}\n        </ScreenContainer>\n        {floatingHeader}\n      </View>;\n  }\n\n  _getHeaderMode() {\n    if (this.props.headerMode) {\n      return this.props.headerMode;\n    }\n    if (Platform.OS === 'android' || this.props.mode === 'modal') {\n      return 'screen';\n    }\n    return 'float';\n  }\n\n  _getHeaderLayoutPreset() {\n    const { headerLayoutPreset } = this.props;\n    if (headerLayoutPreset) {\n      if (__DEV__) {\n        if (this._getHeaderTransitionPreset() === 'uikit' && headerLayoutPreset === 'left' && Platform.OS === 'ios') {\n          console.warn(`headerTransitionPreset with the value 'uikit' is incompatible with headerLayoutPreset 'left'`);\n        }\n      }\n      if (HEADER_LAYOUT_PRESET_VALUES.includes(headerLayoutPreset)) {\n        return headerLayoutPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerLayoutPreset - expected one of ${HEADER_LAYOUT_PRESET_VALUES.join(', ')} but received ${JSON.stringify(headerLayoutPreset)}`);\n      }\n    }\n\n    if (Platform.OS === 'android') {\n      return 'left';\n    } else {\n      return 'center';\n    }\n  }\n\n  _getHeaderTransitionPreset() {\n    // On Android or with header mode screen, we always just use in-place,\n    // we ignore the option entirely (at least until we have other presets)\n    if (Platform.OS === 'android' || this._getHeaderMode() === 'screen') {\n      return 'fade-in-place';\n    }\n\n    const { headerTransitionPreset } = this.props;\n    if (headerTransitionPreset) {\n      if (HEADER_TRANSITION_PRESET_VALUES.includes(headerTransitionPreset)) {\n        return headerTransitionPreset;\n      }\n\n      if (__DEV__) {\n        console.error(`Invalid configuration applied for headerTransitionPreset - expected one of ${HEADER_TRANSITION_PRESET_VALUES.join(', ')} but received ${JSON.stringify(headerTransitionPreset)}`);\n      }\n    }\n\n    return 'fade-in-place';\n  }\n\n  _getheaderBackTitleVisible() {\n    const { headerBackTitleVisible } = this.props;\n\n    return headerBackTitleVisible;\n  }\n\n  _renderInnerScene(scene) {\n    const { navigation, getComponent } = scene.descriptor;\n    const SceneComponent = getComponent();\n\n    const { screenProps } = this.props;\n    const headerMode = this._getHeaderMode();\n    if (headerMode === 'screen') {\n      return <View style={styles.container}>\n          <View style={styles.scenes}>\n            <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />\n          </View>\n          {this._renderHeader(scene, headerMode)}\n        </View>;\n    }\n    return <SceneView screenProps={screenProps} navigation={navigation} component={SceneComponent} />;\n  }\n\n  _getTransitionConfig = () => {\n    const isModal = this.props.mode === 'modal';\n\n    return TransitionConfigs.getTransitionConfig(this.props.transitionConfig, this.props.transitionProps, this.props.lastTransitionProps, isModal);\n  };\n\n  _renderCard = scene => {\n    const { screenInterpolator } = this._getTransitionConfig();\n\n    const style = screenInterpolator && screenInterpolator({ ...this.props.transitionProps, scene });\n\n    // When using a floating header, we need to add some top\n    // padding on the scene.\n    const { options } = scene.descriptor;\n    const hasHeader = options.header !== null;\n    const headerMode = this._getHeaderMode();\n    let paddingTop = 0;\n    if (hasHeader && headerMode === 'float' && !options.headerTransparent) {\n      paddingTop = this.state.floatingHeaderHeight;\n    }\n\n    return <Card {...this.props.transitionProps} key={`card_${scene.key}`} transparent={this.props.transparentCard} style={[style, { paddingTop }, this.props.cardStyle]} scene={scene}>\n        {this._renderInnerScene(scene)}\n      </Card>;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // Header is physically rendered after scenes so that Header won't be\n    // covered by the shadows of the scenes.\n    // That said, we'd have use `flexDirection: 'column-reverse'` to move\n    // Header above the scenes.\n    flexDirection: 'column-reverse',\n    overflow: 'hidden'\n  },\n  scenes: {\n    flex: 1\n  },\n  floatingHeader: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    right: 0\n  }\n});\n\nexport default withOrientation(StackViewLayout);"]},"metadata":{},"sourceType":"module"}