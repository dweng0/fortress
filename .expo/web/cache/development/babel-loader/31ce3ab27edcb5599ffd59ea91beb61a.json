{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\StackView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from \"./StackViewLayout\";\nimport Transitioner from \"../Transitioner\";\nimport TransitionConfigs from \"./StackViewTransitionConfigs\";\nvar NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nclass StackView extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this._configureTransition = (transitionProps, prevTransitionProps) => {\n      return _objectSpread({}, TransitionConfigs.getTransitionConfig(this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, this.props.navigationConfig.mode === 'modal').transitionSpec, {\n        useNativeDriver: !!NativeAnimatedModule\n      });\n    };\n\n    this._render = (transitionProps, lastTransitionProps) => {\n      var {\n        screenProps,\n        navigationConfig\n      } = this.props;\n      return React.createElement(StackViewLayout, _extends({}, navigationConfig, {\n        onGestureBegin: this.props.onGestureBegin,\n        onGestureCanceled: this.props.onGestureCanceled,\n        onGestureEnd: this.props.onGestureEnd,\n        screenProps: screenProps,\n        descriptors: this.props.descriptors,\n        transitionProps: transitionProps,\n        lastTransitionProps: lastTransitionProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }));\n    };\n  }\n\n  render() {\n    return React.createElement(Transitioner, {\n      render: this._render,\n      configureTransition: this._configureTransition,\n      screenProps: this.props.screenProps,\n      navigation: this.props.navigation,\n      descriptors: this.props.descriptors,\n      onTransitionStart: this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart,\n      onTransitionEnd: (transition, lastTransition) => {\n        var {\n          navigationConfig,\n          navigation\n        } = this.props;\n        var onTransitionEnd = this.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n\n        if (transition.navigation.state.isTransitioning) {\n          navigation.dispatch(StackActions.completeTransition({\n            key: navigation.state.key\n          }));\n        }\n\n        onTransitionEnd && onTransitionEnd(transition, lastTransition);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      }\n    });\n  }\n\n  componentDidMount() {\n    var {\n      navigation\n    } = this.props;\n\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(StackActions.completeTransition({\n        key: navigation.state.key\n      }));\n    }\n  }\n\n}\n\nStackView.defaultProps = {\n  navigationConfig: {\n    mode: 'card'\n  }\n};\nexport default StackView;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/StackView/StackView.js"],"names":["React","StackActions","StackViewLayout","Transitioner","TransitionConfigs","NativeAnimatedModule","NativeModules","StackView","Component","_configureTransition","transitionProps","prevTransitionProps","getTransitionConfig","props","navigationConfig","transitionConfig","mode","transitionSpec","useNativeDriver","_render","lastTransitionProps","screenProps","onGestureBegin","onGestureCanceled","onGestureEnd","descriptors","render","navigation","onTransitionStart","transition","lastTransition","onTransitionEnd","state","isTransitioning","dispatch","completeTransition","key","componentDidMount","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { NativeModules } from 'react-native';\n\nimport { StackActions } from 'react-navigation';\nimport StackViewLayout from './StackViewLayout';\nimport Transitioner from '../Transitioner';\nimport TransitionConfigs from './StackViewTransitionConfigs';\n\nconst NativeAnimatedModule = NativeModules && NativeModules.NativeAnimatedModule;\n\nclass StackView extends React.Component {\n  static defaultProps = {\n    navigationConfig: {\n      mode: 'card'\n    }\n  };\n\n  render() {\n    return <Transitioner render={this._render} configureTransition={this._configureTransition} screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} onTransitionStart={this.props.onTransitionStart || this.props.navigationConfig.onTransitionStart} onTransitionEnd={(transition, lastTransition) => {\n      const { navigationConfig, navigation } = this.props;\n      const onTransitionEnd = this.props.onTransitionEnd || navigationConfig.onTransitionEnd;\n      if (transition.navigation.state.isTransitioning) {\n        navigation.dispatch(StackActions.completeTransition({\n          key: navigation.state.key\n        }));\n      }\n      onTransitionEnd && onTransitionEnd(transition, lastTransition);\n    }} />;\n  }\n\n  componentDidMount() {\n    const { navigation } = this.props;\n    if (navigation.state.isTransitioning) {\n      navigation.dispatch(StackActions.completeTransition({\n        key: navigation.state.key\n      }));\n    }\n  }\n\n  _configureTransition = (transitionProps, prevTransitionProps) => {\n    return {\n      ...TransitionConfigs.getTransitionConfig(this.props.navigationConfig.transitionConfig, transitionProps, prevTransitionProps, this.props.navigationConfig.mode === 'modal').transitionSpec,\n      useNativeDriver: !!NativeAnimatedModule\n    };\n  };\n\n  _render = (transitionProps, lastTransitionProps) => {\n    const { screenProps, navigationConfig } = this.props;\n    return <StackViewLayout {...navigationConfig} onGestureBegin={this.props.onGestureBegin} onGestureCanceled={this.props.onGestureCanceled} onGestureEnd={this.props.onGestureEnd} screenProps={screenProps} descriptors={this.props.descriptors} transitionProps={transitionProps} lastTransitionProps={lastTransitionProps} />;\n  };\n}\n\nexport default StackView;"]},"metadata":{},"sourceType":"module"}