{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getChildEventSubscriber from \"./getChildEventSubscriber\";\nimport getChildRouter from \"./getChildRouter\";\nimport getNavigationActionCreators from \"./routers/getNavigationActionCreators\";\nimport invariant from \"./utils/invariant\";\n\nvar createParamGetter = route => (paramName, defaultValue) => {\n  var params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction _getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  var children = navigation._childrenNavigation || (navigation._childrenNavigation = {});\n  var childRoute = navigation.state.routes.find(r => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  var childRouter = getChildRouter(navigation.router, childRoute.routeName);\n  var focusedGrandChildRoute = childRoute.routes && typeof childRoute.index === 'number' ? childRoute.routes[childRoute.index] : null;\n\n  var actionCreators = _objectSpread({}, navigation.actions, {}, navigation.router.getActionCreators(childRoute, navigation.state.key), {}, childRouter ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key) : {}, {}, getNavigationActionCreators(childRoute));\n\n  var actionHelpers = {};\n  Object.keys(actionCreators).forEach(actionName => {\n    actionHelpers[actionName] = function () {\n      var actionCreator = actionCreators[actionName];\n      var action = actionCreator(...arguments);\n      return navigation.dispatch(action);\n    };\n  });\n\n  if (children[childKey]) {\n    children[childKey] = _objectSpread({}, children[childKey], {}, actionHelpers, {\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute)\n    });\n    return children[childKey];\n  }\n\n  var childSubscriber = getChildEventSubscriber(navigation.addListener, childKey);\n  children[childKey] = _objectSpread({}, actionHelpers, {\n    state: childRoute,\n    router: childRouter,\n    actions: actionCreators,\n    getParam: createParamGetter(childRoute),\n    getChildNavigation: grandChildKey => _getChildNavigation(children[childKey], grandChildKey, () => {\n      var nav = getCurrentParentNavigation();\n      return nav && nav.getChildNavigation(childKey);\n    }),\n    isFocused: () => {\n      var currentNavigation = getCurrentParentNavigation();\n\n      if (!currentNavigation) {\n        return false;\n      }\n\n      var {\n        routes,\n        index\n      } = currentNavigation.state;\n\n      if (!currentNavigation.isFocused()) {\n        return false;\n      }\n\n      if (routes[index].key === childKey) {\n        return true;\n      }\n\n      return false;\n    },\n    dispatch: navigation.dispatch,\n    getScreenProps: navigation.getScreenProps,\n    dangerouslyGetParent: getCurrentParentNavigation,\n    addListener: childSubscriber.addListener\n  });\n  return children[childKey];\n}\n\nexport default _getChildNavigation;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/getChildNavigation.js"],"names":["getChildEventSubscriber","getChildRouter","getNavigationActionCreators","invariant","createParamGetter","route","paramName","defaultValue","params","getChildNavigation","navigation","childKey","getCurrentParentNavigation","children","_childrenNavigation","childRoute","state","routes","find","r","key","childRouter","router","routeName","focusedGrandChildRoute","index","actionCreators","actions","getActionCreators","actionHelpers","Object","keys","forEach","actionName","actionCreator","action","dispatch","getParam","childSubscriber","addListener","grandChildKey","nav","isFocused","currentNavigation","getScreenProps","dangerouslyGetParent"],"mappings":"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","sourcesContent":["import getChildEventSubscriber from './getChildEventSubscriber';\nimport getChildRouter from './getChildRouter';\nimport getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport invariant from './utils/invariant';\n\nconst createParamGetter = route => (paramName, defaultValue) => {\n  const params = route.params;\n\n  if (params && paramName in params) {\n    return params[paramName];\n  }\n\n  return defaultValue;\n};\n\nfunction getChildNavigation(navigation, childKey, getCurrentParentNavigation) {\n  const children =\n    navigation._childrenNavigation || (navigation._childrenNavigation = {});\n\n  const childRoute = navigation.state.routes.find(r => r.key === childKey);\n\n  if (!childRoute) {\n    return null;\n  }\n\n  if (children[childKey] && children[childKey].state === childRoute) {\n    return children[childKey];\n  }\n\n  const childRouter = getChildRouter(navigation.router, childRoute.routeName);\n\n  // If the route has children, we'll use this to pass in to the action creators\n  // for the childRouter so that any action that depends on the active route will\n  // behave as expected. We don't explicitly require that routers implement routes\n  // and index properties, but if we did then we would put an invariant here to\n  // ensure that a focusedGrandChildRoute exists if childRouter is defined.\n  const focusedGrandChildRoute =\n    childRoute.routes && typeof childRoute.index === 'number'\n      ? childRoute.routes[childRoute.index]\n      : null;\n\n  const actionCreators = {\n    ...navigation.actions,\n    ...navigation.router.getActionCreators(childRoute, navigation.state.key),\n    ...(childRouter\n      ? childRouter.getActionCreators(focusedGrandChildRoute, childRoute.key)\n      : {}),\n    ...getNavigationActionCreators(childRoute),\n  };\n\n  const actionHelpers = {};\n  Object.keys(actionCreators).forEach(actionName => {\n    actionHelpers[actionName] = (...args) => {\n      const actionCreator = actionCreators[actionName];\n      const action = actionCreator(...args);\n      return navigation.dispatch(action);\n    };\n  });\n\n  if (children[childKey]) {\n    children[childKey] = {\n      ...children[childKey],\n      ...actionHelpers,\n      state: childRoute,\n      router: childRouter,\n      actions: actionCreators,\n      getParam: createParamGetter(childRoute),\n    };\n    return children[childKey];\n  }\n\n  const childSubscriber = getChildEventSubscriber(\n    navigation.addListener,\n    childKey\n  );\n\n  children[childKey] = {\n    ...actionHelpers,\n\n    state: childRoute,\n    router: childRouter,\n    actions: actionCreators,\n    getParam: createParamGetter(childRoute),\n\n    getChildNavigation: grandChildKey =>\n      getChildNavigation(children[childKey], grandChildKey, () => {\n        const nav = getCurrentParentNavigation();\n        return nav && nav.getChildNavigation(childKey);\n      }),\n\n    isFocused: () => {\n      const currentNavigation = getCurrentParentNavigation();\n      if (!currentNavigation) {\n        return false;\n      }\n      const { routes, index } = currentNavigation.state;\n      if (!currentNavigation.isFocused()) {\n        return false;\n      }\n      if (routes[index].key === childKey) {\n        return true;\n      }\n      return false;\n    },\n    dispatch: navigation.dispatch,\n    getScreenProps: navigation.getScreenProps,\n    dangerouslyGetParent: getCurrentParentNavigation,\n    addListener: childSubscriber.addListener,\n  };\n  return children[childKey];\n}\n\nexport default getChildNavigation;\n"]},"metadata":{},"sourceType":"module"}