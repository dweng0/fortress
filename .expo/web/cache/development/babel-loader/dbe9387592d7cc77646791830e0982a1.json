{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-drawer\\\\dist\\\\views\\\\DrawerSidebar.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport invariant from \"../utils/invariant\";\n\nclass DrawerSidebar extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._getScreenOptions = routeKey => {\n      var descriptor = this.props.descriptors[routeKey];\n      invariant(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');\n      return descriptor.options;\n    };\n\n    this._getLabel = (_ref) => {\n      var {\n        focused,\n        tintColor,\n        route\n      } = _ref;\n\n      var {\n        drawerLabel,\n        title\n      } = this._getScreenOptions(route.key);\n\n      if (drawerLabel) {\n        return typeof drawerLabel === 'function' ? drawerLabel({\n          tintColor,\n          focused\n        }) : drawerLabel;\n      }\n\n      if (typeof title === 'string') {\n        return title;\n      }\n\n      return route.routeName;\n    };\n\n    this._renderIcon = (_ref2) => {\n      var {\n        focused,\n        tintColor,\n        route\n      } = _ref2;\n\n      var {\n        drawerIcon\n      } = this._getScreenOptions(route.key);\n\n      if (drawerIcon) {\n        return typeof drawerIcon === 'function' ? drawerIcon({\n          tintColor,\n          focused\n        }) : drawerIcon;\n      }\n\n      return null;\n    };\n\n    this._onItemPress = (_ref3) => {\n      var {\n        route,\n        focused\n      } = _ref3;\n\n      if (!focused) {\n        var subAction;\n\n        if (route.index != null && route.index !== 0) {\n          subAction = StackActions.reset({\n            index: 0,\n            actions: [NavigationActions.navigate({\n              routeName: route.routes[0].routeName\n            })]\n          });\n        }\n\n        this.props.navigation.dispatch(NavigationActions.navigate({\n          routeName: route.routeName,\n          action: subAction\n        }));\n      }\n    };\n  }\n\n  render() {\n    var ContentComponent = this.props.contentComponent;\n\n    if (!ContentComponent) {\n      return null;\n    }\n\n    var {\n      state\n    } = this.props.navigation;\n    invariant(typeof state.index === 'number', 'should be set');\n    return React.createElement(View, {\n      style: [styles.container, this.props.style],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      }\n    }, React.createElement(ContentComponent, _extends({}, this.props.contentOptions, {\n      navigation: this.props.navigation,\n      descriptors: this.props.descriptors,\n      items: state.routes,\n      activeItemKey: state.routes[state.index] ? state.routes[state.index].key : null,\n      screenProps: this.props.screenProps,\n      getLabel: this._getLabel,\n      renderIcon: this._renderIcon,\n      onItemPress: this._onItemPress,\n      drawerPosition: this.props.drawerPosition,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      }\n    })));\n  }\n\n}\n\nexport default DrawerSidebar;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-drawer/dist/views/DrawerSidebar.js"],"names":["React","NavigationActions","StackActions","invariant","DrawerSidebar","PureComponent","_getScreenOptions","routeKey","descriptor","props","descriptors","options","_getLabel","focused","tintColor","route","drawerLabel","title","key","routeName","_renderIcon","drawerIcon","_onItemPress","subAction","index","reset","actions","navigate","routes","navigation","dispatch","action","render","ContentComponent","contentComponent","state","styles","container","style","contentOptions","screenProps","drawerPosition","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nimport { NavigationActions, StackActions } from 'react-navigation';\nimport invariant from '../utils/invariant';\n\n/**\n * Component that renders the sidebar screen of the drawer.\n */\n\nclass DrawerSidebar extends React.PureComponent {\n  _getScreenOptions = routeKey => {\n    const descriptor = this.props.descriptors[routeKey];\n    invariant(descriptor.options, 'Cannot access screen descriptor options from drawer sidebar');\n    return descriptor.options;\n  };\n\n  _getLabel = ({ focused, tintColor, route }) => {\n    const { drawerLabel, title } = this._getScreenOptions(route.key);\n    if (drawerLabel) {\n      return typeof drawerLabel === 'function' ? drawerLabel({ tintColor, focused }) : drawerLabel;\n    }\n\n    if (typeof title === 'string') {\n      return title;\n    }\n\n    return route.routeName;\n  };\n\n  _renderIcon = ({ focused, tintColor, route }) => {\n    const { drawerIcon } = this._getScreenOptions(route.key);\n    if (drawerIcon) {\n      return typeof drawerIcon === 'function' ? drawerIcon({ tintColor, focused }) : drawerIcon;\n    }\n    return null;\n  };\n\n  _onItemPress = ({ route, focused }) => {\n    if (!focused) {\n      let subAction;\n      // TODO (v3): Revisit and repeal this behavior:\n      // if the child screen is a StackRouter then always navigate to its first screen (see #1914)\n      if (route.index != null && route.index !== 0) {\n        subAction = StackActions.reset({\n          index: 0,\n          actions: [NavigationActions.navigate({\n            routeName: route.routes[0].routeName\n          })]\n        });\n      }\n      this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName: route.routeName,\n        action: subAction\n      }));\n    }\n  };\n\n  render() {\n    const ContentComponent = this.props.contentComponent;\n    if (!ContentComponent) {\n      return null;\n    }\n    const { state } = this.props.navigation;\n    invariant(typeof state.index === 'number', 'should be set');\n    return <View style={[styles.container, this.props.style]}>\n        <ContentComponent {...this.props.contentOptions} navigation={this.props.navigation} descriptors={this.props.descriptors} items={state.routes} activeItemKey={state.routes[state.index] ? state.routes[state.index].key : null} screenProps={this.props.screenProps} getLabel={this._getLabel} renderIcon={this._renderIcon} onItemPress={this._onItemPress} drawerPosition={this.props.drawerPosition} />\n      </View>;\n  }\n}\n\nexport default DrawerSidebar;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});"]},"metadata":{},"sourceType":"module"}