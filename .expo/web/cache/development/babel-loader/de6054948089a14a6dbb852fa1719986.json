{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\src\\\\components\\\\emailandpassword\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Row from \"../row\";\nimport Label from \"../label\";\nimport { emailAndPassword } from \"../../international\";\nexport default (props => {\n  var [email, setEmail] = useState('');\n  var [password, setPassword] = useState('');\n  var [confirm, setConfirm] = useState('');\n  var [emailError, setEmailError] = useState('');\n  var [passwordError, setPasswordError] = useState('');\n  useEffect(() => {\n    props.errors(null);\n\n    if (password && password === confirm) {\n      if (props.email) {\n        props.email(email);\n      }\n\n      if (props.password) {\n        props.password(password);\n      }\n    }\n\n    if (emailError || passwordError && props.errors) {\n      props.errors({\n        email: emailError,\n        password: passwordError\n      });\n    }\n  }, [email, password, confirm, emailError, passwordError]);\n\n  var validateEmail = () => {\n    setEmailError(false);\n\n    if (email && !email.includes('@')) {\n      setEmailError(emailAndPassword.errorEmailIncorrect);\n    }\n  };\n\n  var validatePassword = () => {\n    setPasswordError(false);\n\n    if (password !== confirm) {\n      setPasswordError(emailAndPassword.errorPassword);\n    }\n  };\n\n  var maybeShowEmailError = () => {\n    if (emailError) {\n      return React.createElement(Label, {\n        color: \"tomato\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        }\n      }, emailError);\n    }\n  };\n\n  var maybeShowPasswordError = () => {\n    if (passwordError) {\n      return React.createElement(Label, {\n        color: \"tomato\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        }\n      }, passwordError);\n    }\n  };\n\n  if (props.passwordError && passwordError !== props.passwordError) {\n    setPasswordError(props.passwordError);\n  }\n\n  if (props.emailError && emailError !== props.emailError) {\n    setEmailError(props.emailError);\n  }\n\n  var maybeShowConfirmation = () => {\n    if (props.confirmPassword) {\n      return React.createElement(React.Fragment, null, React.createElement(Label, {\n        size: \"small\",\n        position: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        }\n      }, emailAndPassword.confirm), React.createElement(TextInput, {\n        style: {\n          marginTop: 10,\n          padding: 19,\n          marginLeft: 20,\n          marginRight: 20,\n          minWidth: 300,\n          backgroundColor: '#fff',\n          borderRadius: 7,\n          borderWidth: 2,\n          borderColor: '#000',\n          alignItems: 'center'\n        },\n        secureTextEntry: true,\n        onChangeText: text => setConfirm(text),\n        onBlur: () => validatePassword(),\n        value: confirm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        }\n      }));\n    }\n  };\n\n  return React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    }\n  }, React.createElement(Label, {\n    size: \"small\",\n    position: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    }\n  }, emailAndPassword.email), React.createElement(TextInput, {\n    style: {\n      marginTop: 10,\n      padding: 19,\n      marginLeft: 20,\n      marginRight: 20,\n      minWidth: 300,\n      backgroundColor: '#fff',\n      borderRadius: 7,\n      borderWidth: 2,\n      borderColor: '#000',\n      alignItems: 'center'\n    },\n    onChangeText: text => setEmail(text),\n    onBlur: () => validateEmail(),\n    value: email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    }\n  }), maybeShowEmailError(), React.createElement(Label, {\n    size: \"small\",\n    position: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    }\n  }, emailAndPassword.password), React.createElement(TextInput, {\n    style: {\n      marginTop: 10,\n      padding: 19,\n      marginLeft: 20,\n      marginRight: 20,\n      minWidth: 300,\n      backgroundColor: '#fff',\n      borderRadius: 7,\n      borderWidth: 2,\n      borderColor: '#000',\n      alignItems: 'center'\n    },\n    secureTextEntry: true,\n    onChangeText: text => setPassword(text),\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    }\n  }), maybeShowPasswordError(), maybeShowConfirmation());\n});","map":{"version":3,"sources":["G:/projects/fortress/src/components/emailandpassword/index.js"],"names":["React","useState","useEffect","Row","Label","emailAndPassword","props","email","setEmail","password","setPassword","confirm","setConfirm","emailError","setEmailError","passwordError","setPasswordError","errors","validateEmail","includes","errorEmailIncorrect","validatePassword","errorPassword","maybeShowEmailError","maybeShowPasswordError","maybeShowConfirmation","confirmPassword","marginTop","padding","marginLeft","marginRight","minWidth","backgroundColor","borderRadius","borderWidth","borderColor","alignItems","text"],"mappings":"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","sourcesContent":["//reusable accross login and registerimport React, { useState, useEffect } from \"react\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { TextInput} from 'react-native';\r\n\r\nimport Row from '../row';\r\nimport Label from '../label';\r\n\r\nimport { emailAndPassword } from '../../international';\r\n\r\nexport default props => {\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [confirm, setConfirm] = useState('');\r\n    const [emailError, setEmailError] = useState('');\r\n    const [passwordError, setPasswordError] = useState('');\r\n\r\n    useEffect(() => {\r\n        props.errors(null);\r\n        if (password && password === confirm) {\r\n            if (props.email) {\r\n                props.email(email);\r\n            }\r\n\r\n            if (props.password) {\r\n                props.password(password);\r\n            }\r\n        }\r\n\r\n        if (emailError || passwordError && props.errors) {\r\n            props.errors({ email: emailError, password: passwordError });\r\n        }\r\n\r\n    }, [email, password, confirm, emailError, passwordError]);\r\n    const validateEmail = () => {\r\n        setEmailError(false);\r\n        if (email && !email.includes('@')) {\r\n            setEmailError(emailAndPassword.errorEmailIncorrect);\r\n        }\r\n    };\r\n\r\n    const validatePassword = () => {\r\n        setPasswordError(false);\r\n        if (password !== confirm) {\r\n            setPasswordError(emailAndPassword.errorPassword);\r\n        }\r\n    }\r\n\r\n    const maybeShowEmailError = () => {\r\n        if (emailError) {\r\n            return <Label color=\"tomato\">{emailError}</Label>;\r\n        }\r\n    };\r\n\r\n    const maybeShowPasswordError = () => {\r\n        if (passwordError) {\r\n            return <Label color=\"tomato\">{passwordError}</Label>;\r\n        }\r\n    };\r\n\r\n    if (props.passwordError && passwordError !== props.passwordError) {\r\n        setPasswordError(props.passwordError);\r\n    }\r\n\r\n    if (props.emailError && emailError !== props.emailError) {\r\n        setEmailError(props.emailError);\r\n    }\r\n\r\n    const maybeShowConfirmation = () => {\r\n        if (props.confirmPassword) {\r\n            return (\r\n                <>\r\n                    <Label size=\"small\" position=\"center\">\r\n                        {emailAndPassword.confirm}\r\n                    </Label>\r\n                    <TextInput\r\n                        style={{\r\n                            marginTop: 10,\r\n                            padding: 19,\r\n                            marginLeft: 20,\r\n                            marginRight: 20,\r\n                            minWidth: 300,\r\n                            backgroundColor: '#fff',\r\n                            borderRadius: 7,\r\n                            borderWidth: 2,\r\n                            borderColor: '#000',\r\n                            alignItems: 'center'\r\n                        }}\r\n                        secureTextEntry={true}\r\n                        onChangeText={text => setConfirm(text)}\r\n                        onBlur={() => validatePassword()}\r\n                        value={confirm}\r\n                    />\r\n                </>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Row>\r\n                <Label size=\"small\" position=\"center\">\r\n                    {emailAndPassword.email}\r\n                </Label>\r\n                <TextInput\r\n                    style={{\r\n                        marginTop: 10,\r\n                        padding: 19,\r\n                        marginLeft: 20,\r\n                        marginRight: 20,\r\n                        minWidth: 300,\r\n                        backgroundColor: '#fff',\r\n                        borderRadius: 7,\r\n                        borderWidth: 2,\r\n                        borderColor: '#000',\r\n                        alignItems: 'center'\r\n                    }}\r\n                    onChangeText={text => setEmail(text)}\r\n                    onBlur={() => validateEmail()}\r\n                    value={email}\r\n                />\r\n                {maybeShowEmailError()}\r\n                <Label size=\"small\" position=\"center\">\r\n                    {emailAndPassword.password}\r\n                </Label>\r\n                <TextInput\r\n                    style={{\r\n                        marginTop: 10,\r\n                        padding: 19,\r\n                        marginLeft: 20,\r\n                        marginRight: 20,\r\n                        minWidth: 300,\r\n                        backgroundColor: '#fff',\r\n                        borderRadius: 7,\r\n                        borderWidth: 2,\r\n                        borderColor: '#000',\r\n                        alignItems: 'center'\r\n                    }}\r\n                    secureTextEntry={true}\r\n                    onChangeText={text => setPassword(text)}\r\n                    value={password}\r\n                />\r\n                {maybeShowPasswordError()}\r\n                {maybeShowConfirmation()}\r\n        </Row>\r\n    );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}