{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\Header\\\\ModularHeaderBackButton.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableItem from \"../TouchableItem\";\nimport defaultBackImage from \"../assets/back-icon.png\";\n\nclass ModularHeaderBackButton extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n\n    this._onTextLayout = e => {\n      if (this.state.initialTextWidth) {\n        return;\n      }\n\n      this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n  }\n\n  _renderBackImage() {\n    var {\n      backImage,\n      title,\n      tintColor\n    } = this.props;\n    var BackImage;\n    var props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {\n          tintColor\n        }],\n        source: defaultBackImage\n      };\n    }\n\n    return React.createElement(BackImage, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      }\n    }));\n  }\n\n  render() {\n    var {\n      onPress,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle\n    } = this.props;\n    var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n    var backButtonTitle = renderTruncated ? truncatedTitle : title;\n\n    if (backButtonTitle && backButtonTitle.length > 8) {\n      backButtonTitle = truncatedTitle;\n    }\n\n    var {\n      ButtonContainerComponent,\n      LabelContainerComponent\n    } = this.props;\n    return React.createElement(TouchableItem, {\n      accessibilityComponentType: \"button\",\n      accessibilityLabel: backButtonTitle,\n      accessibilityTraits: \"button\",\n      testID: \"header-back\",\n      delayPressIn: 0,\n      onPress: onPress,\n      style: styles.container,\n      borderless: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      }\n    }, React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      }\n    }, React.createElement(ButtonContainerComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      }\n    }, this._renderBackImage()), typeof backButtonTitle === 'string' && React.createElement(LabelContainerComponent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      }\n    }, React.createElement(Text, {\n      onLayout: this._onTextLayout,\n      style: [styles.title, !!tintColor && {\n        color: tintColor\n      }, titleStyle],\n      numberOfLines: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      }\n    }, backButtonTitle))));\n  }\n\n}\n\nModularHeaderBackButton.defaultProps = {\n  tintColor: '#037aff',\n  truncatedTitle: 'Back'\n};\nvar styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: {\n    marginRight: 3\n  }\n});\nexport default ModularHeaderBackButton;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/Header/ModularHeaderBackButton.js"],"names":["React","TouchableItem","defaultBackImage","ModularHeaderBackButton","PureComponent","state","_onTextLayout","e","initialTextWidth","setState","nativeEvent","layout","x","width","_renderBackImage","backImage","title","tintColor","props","BackImage","isValidElement","Image","style","styles","icon","iconWithTitle","source","render","onPress","titleStyle","truncatedTitle","renderTruncated","backButtonTitle","length","ButtonContainerComponent","LabelContainerComponent","container","color","defaultProps","StyleSheet","create","alignItems","flexDirection","backgroundColor","fontSize","paddingRight","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { I18nManager, Image, Text, View, StyleSheet } from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\n\nclass ModularHeaderBackButton extends React.PureComponent {\n  static defaultProps = {\n    tintColor: '#037aff',\n    truncatedTitle: 'Back'\n  };\n\n  state = {};\n\n  _onTextLayout = e => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n    });\n  };\n\n  _renderBackImage() {\n    const { backImage, title, tintColor } = this.props;\n\n    let BackImage;\n    let props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && { tintColor }],\n        source: defaultBackImage\n      };\n    }\n\n    return <BackImage {...props} />;\n  }\n\n  render() {\n    const {\n      onPress,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle\n    } = this.props;\n\n    const renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n\n    let backButtonTitle = renderTruncated ? truncatedTitle : title;\n\n    // TODO: When we've sorted out measuring in the header, let's revisit this.\n    // This is clearly a bad workaround.\n    if (backButtonTitle && backButtonTitle.length > 8) {\n      backButtonTitle = truncatedTitle;\n    }\n\n    const { ButtonContainerComponent, LabelContainerComponent } = this.props;\n\n    return <TouchableItem accessibilityComponentType=\"button\" accessibilityLabel={backButtonTitle} accessibilityTraits=\"button\" testID=\"header-back\" delayPressIn={0} onPress={onPress} style={styles.container} borderless>\n        <View style={styles.container}>\n          <ButtonContainerComponent>\n            {this._renderBackImage()}\n          </ButtonContainerComponent>\n          {typeof backButtonTitle === 'string' && <LabelContainerComponent>\n              <Text onLayout={this._onTextLayout} style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]} numberOfLines={1}>\n                {backButtonTitle}\n              </Text>\n            </LabelContainerComponent>}\n        </View>\n      </TouchableItem>;\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: {\n    height: 21,\n    width: 12,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]\n  },\n  iconWithTitle: {\n    marginRight: 3\n  }\n});\n\nexport default ModularHeaderBackButton;"]},"metadata":{},"sourceType":"module"}