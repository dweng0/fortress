{"ast":null,"code":"import React from 'react';\nimport withNavigation from \"./withNavigation\";\nvar EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur'\n};\nvar EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.addListener = eventName => {\n      var listener = this.props[EventNameToPropName[eventName]];\n\n      if (listener) {\n        this.subscriptions[eventName] = this.props.navigation.addListener(eventName, listener);\n      }\n    };\n\n    this.removeListener = eventName => {\n      if (this.subscriptions[eventName]) {\n        this.subscriptions[eventName].remove();\n        this.subscriptions[eventName] = undefined;\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.subscriptions = {};\n    EventNames.forEach(this.addListener);\n  }\n\n  componentDidUpdate(prevProps) {\n    EventNames.forEach(eventName => {\n      var listenerHasChanged = this.props[EventNameToPropName[eventName]] !== prevProps[EventNameToPropName[eventName]];\n\n      if (listenerHasChanged) {\n        this.removeListener(eventName);\n        this.addListener(eventName);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(this.removeListener);\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nexport default withNavigation(NavigationEvents);","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/views/NavigationEvents.js"],"names":["React","withNavigation","EventNameToPropName","willFocus","didFocus","willBlur","didBlur","EventNames","Object","keys","NavigationEvents","Component","addListener","eventName","listener","props","subscriptions","navigation","removeListener","remove","undefined","componentDidMount","forEach","componentDidUpdate","prevProps","listenerHasChanged","componentWillUnmount","render"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP;AAEA,IAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,aADe;AAE1BC,EAAAA,QAAQ,EAAE,YAFgB;AAG1BC,EAAAA,QAAQ,EAAE,YAHgB;AAI1BC,EAAAA,OAAO,EAAE;AAJiB,CAA5B;AAOA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYP,mBAAZ,CAAnB;;AAEA,MAAMQ,gBAAN,SAA+BV,KAAK,CAACW,SAArC,CAA+C;AAAA;AAAA;;AAAA,SAsB7CC,WAtB6C,GAsB/BC,SAAS,IAAI;AACzB,UAAMC,QAAQ,GAAG,KAAKC,KAAL,CAAWb,mBAAmB,CAACW,SAAD,CAA9B,CAAjB;;AACA,UAAIC,QAAJ,EAAc;AACZ,aAAKE,aAAL,CAAmBH,SAAnB,IAAgC,KAAKE,KAAL,CAAWE,UAAX,CAAsBL,WAAtB,CAC9BC,SAD8B,EAE9BC,QAF8B,CAAhC;AAID;AACF,KA9B4C;;AAAA,SAgC7CI,cAhC6C,GAgC5BL,SAAS,IAAI;AAC5B,UAAI,KAAKG,aAAL,CAAmBH,SAAnB,CAAJ,EAAmC;AACjC,aAAKG,aAAL,CAAmBH,SAAnB,EAA8BM,MAA9B;AACA,aAAKH,aAAL,CAAmBH,SAAnB,IAAgCO,SAAhC;AACD;AACF,KArC4C;AAAA;;AAC7CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKL,aAAL,GAAqB,EAArB;AACAT,IAAAA,UAAU,CAACe,OAAX,CAAmB,KAAKV,WAAxB;AACD;;AAEDW,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5BjB,IAAAA,UAAU,CAACe,OAAX,CAAmBT,SAAS,IAAI;AAC9B,UAAMY,kBAAkB,GACtB,KAAKV,KAAL,CAAWb,mBAAmB,CAACW,SAAD,CAA9B,MACAW,SAAS,CAACtB,mBAAmB,CAACW,SAAD,CAApB,CAFX;;AAGA,UAAIY,kBAAJ,EAAwB;AACtB,aAAKP,cAAL,CAAoBL,SAApB;AACA,aAAKD,WAAL,CAAiBC,SAAjB;AACD;AACF,KARD;AASD;;AAEDa,EAAAA,oBAAoB,GAAG;AACrBnB,IAAAA,UAAU,CAACe,OAAX,CAAmB,KAAKJ,cAAxB;AACD;;AAmBDS,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAzC4C;;AA4C/C,eAAe1B,cAAc,CAACS,gBAAD,CAA7B","sourcesContent":["import React from 'react';\nimport withNavigation from './withNavigation';\n\nconst EventNameToPropName = {\n  willFocus: 'onWillFocus',\n  didFocus: 'onDidFocus',\n  willBlur: 'onWillBlur',\n  didBlur: 'onDidBlur',\n};\n\nconst EventNames = Object.keys(EventNameToPropName);\n\nclass NavigationEvents extends React.Component {\n  componentDidMount() {\n    this.subscriptions = {};\n    EventNames.forEach(this.addListener);\n  }\n\n  componentDidUpdate(prevProps) {\n    EventNames.forEach(eventName => {\n      const listenerHasChanged =\n        this.props[EventNameToPropName[eventName]] !==\n        prevProps[EventNameToPropName[eventName]];\n      if (listenerHasChanged) {\n        this.removeListener(eventName);\n        this.addListener(eventName);\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    EventNames.forEach(this.removeListener);\n  }\n\n  addListener = eventName => {\n    const listener = this.props[EventNameToPropName[eventName]];\n    if (listener) {\n      this.subscriptions[eventName] = this.props.navigation.addListener(\n        eventName,\n        listener\n      );\n    }\n  };\n\n  removeListener = eventName => {\n    if (this.subscriptions[eventName]) {\n      this.subscriptions[eventName].remove();\n      this.subscriptions[eventName] = undefined;\n    }\n  };\n\n  render() {\n    return null;\n  }\n}\n\nexport default withNavigation(NavigationEvents);\n"]},"metadata":{},"sourceType":"module"}