{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\navigators\\\\createBottomTabNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScreenContainer } from 'react-native-screens';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport BottomTabBar from \"../views/BottomTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nclass TabNavigationView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      loaded: [this.props.navigation.state.index]\n    };\n\n    this._renderTabBar = () => {\n      var {\n        tabBarComponent: TabBarComponent = BottomTabBar,\n        tabBarOptions,\n        navigation,\n        screenProps,\n        getLabelText,\n        getAccessibilityLabel,\n        getButtonComponent,\n        getTestID,\n        renderIcon,\n        onTabPress\n      } = this.props;\n      var {\n        descriptors\n      } = this.props;\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarVisible === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, {\n        jumpTo: this._jumpTo,\n        navigation: navigation,\n        screenProps: screenProps,\n        onTabPress: onTabPress,\n        getLabelText: getLabelText,\n        getButtonComponent: getButtonComponent,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getTestID: getTestID,\n        renderIcon: renderIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        }\n      }));\n    };\n\n    this._jumpTo = key => {\n      var {\n        navigation,\n        onIndexChange\n      } = this.props;\n      var index = navigation.state.routes.findIndex(route => route.key === key);\n      onIndexChange(index);\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  render() {\n    var {\n      navigation,\n      renderScene,\n      lazy\n    } = this.props;\n    var {\n      routes\n    } = navigation.state;\n    var {\n      loaded\n    } = this.state;\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      }\n    }, React.createElement(ScreenContainer, {\n      style: styles.pages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      }\n    }, routes.map((route, index) => {\n      if (lazy && !loaded.includes(index)) {\n        return null;\n      }\n\n      var isFocused = navigation.state.index === index;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        }\n      }, renderScene({\n        route\n      }));\n    })), this._renderTabBar());\n  }\n\n}\n\nTabNavigationView.defaultProps = {\n  lazy: true\n};\npolyfill(TabNavigationView);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\nexport default createTabNavigator(TabNavigationView);","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-tabs/dist/navigators/createBottomTabNavigator.js"],"names":["React","ScreenContainer","polyfill","createTabNavigator","BottomTabBar","ResourceSavingScene","TabNavigationView","PureComponent","state","loaded","props","navigation","index","_renderTabBar","tabBarComponent","TabBarComponent","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getButtonComponent","getTestID","renderIcon","onTabPress","descriptors","route","routes","descriptor","key","options","tabBarVisible","_jumpTo","onIndexChange","findIndex","getDerivedStateFromProps","nextProps","prevState","includes","render","renderScene","lazy","styles","container","pages","map","isFocused","StyleSheet","absoluteFill","opacity","defaultProps","create","flex","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { ScreenContainer } from 'react-native-screens';\nimport { polyfill } from 'react-lifecycles-compat';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport BottomTabBar from '../views/BottomTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabNavigationView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index]\n    };\n  }\n\n  state = {\n    loaded: [this.props.navigation.state.index]\n  };\n\n  _renderTabBar = () => {\n    const {\n      tabBarComponent: TabBarComponent = BottomTabBar,\n      tabBarOptions,\n      navigation,\n      screenProps,\n      getLabelText,\n      getAccessibilityLabel,\n      getButtonComponent,\n      getTestID,\n      renderIcon,\n      onTabPress\n    } = this.props;\n\n    const { descriptors } = this.props;\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarVisible === false) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} jumpTo={this._jumpTo} navigation={navigation} screenProps={screenProps} onTabPress={onTabPress} getLabelText={getLabelText} getButtonComponent={getButtonComponent} getAccessibilityLabel={getAccessibilityLabel} getTestID={getTestID} renderIcon={renderIcon} />;\n  };\n\n  _jumpTo = key => {\n    const { navigation, onIndexChange } = this.props;\n\n    const index = navigation.state.routes.findIndex(route => route.key === key);\n\n    onIndexChange(index);\n  };\n\n  render() {\n    const { navigation, renderScene, lazy } = this.props;\n    const { routes } = navigation.state;\n    const { loaded } = this.state;\n\n    return <View style={styles.container}>\n        <ScreenContainer style={styles.pages}>\n          {routes.map((route, index) => {\n          if (lazy && !loaded.includes(index)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const isFocused = navigation.state.index === index;\n\n          return <ResourceSavingScene key={route.key} style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]} isVisible={isFocused}>\n                {renderScene({ route })}\n              </ResourceSavingScene>;\n        })}\n        </ScreenContainer>\n        {this._renderTabBar()}\n      </View>;\n  }\n}\n\npolyfill(TabNavigationView);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  pages: {\n    flex: 1\n  }\n});\n\nexport default createTabNavigator(TabNavigationView);"]},"metadata":{},"sourceType":"module"}