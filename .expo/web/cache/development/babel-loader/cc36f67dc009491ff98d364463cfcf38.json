{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\views\\\\MaterialTopTabBar.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport CrossFadeIcon from \"./CrossFadeIcon\";\nexport default class TabBarTop extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._renderLabel = (_ref) => {\n      var {\n        route\n      } = _ref;\n      var {\n        position,\n        navigation,\n        activeTintColor,\n        inactiveTintColor,\n        showLabel,\n        upperCaseLabel,\n        labelStyle,\n        allowFontScaling\n      } = this.props;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var {\n        routes\n      } = navigation.state;\n      var index = routes.indexOf(route);\n      var focused = index === navigation.state.index;\n      var inputRange = [-1, ...routes.map((x, i) => i)];\n      var outputRange = inputRange.map(inputIndex => inputIndex === index ? activeTintColor : inactiveTintColor);\n      var color = position.interpolate({\n        inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = focused ? activeTintColor : inactiveTintColor;\n      var label = this.props.getLabelText({\n        route\n      });\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label({\n          focused,\n          tintColor\n        });\n      }\n\n      return label;\n    };\n\n    this._renderIcon = (_ref2) => {\n      var {\n        route\n      } = _ref2;\n      var {\n        position,\n        navigation,\n        activeTintColor,\n        inactiveTintColor,\n        renderIcon,\n        showIcon,\n        iconStyle\n      } = this.props;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      var index = navigation.state.routes.indexOf(route);\n      var inputRange = [-1, ...navigation.state.routes.map((x, i) => i)];\n      var activeOpacity = position.interpolate({\n        inputRange,\n        outputRange: inputRange.map(i => i === index ? 1 : 0)\n      });\n      var inactiveOpacity = position.interpolate({\n        inputRange,\n        outputRange: inputRange.map(i => i === index ? 0 : 1)\n      });\n      return React.createElement(CrossFadeIcon, {\n        route: route,\n        navigation: navigation,\n        activeOpacity: activeOpacity,\n        inactiveOpacity: inactiveOpacity,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      });\n    };\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      navigation,\n      renderIcon,\n      getLabelText\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"navigation\", \"renderIcon\", \"getLabelText\"]);\n\n    return React.createElement(TabBar, _extends({}, rest, {\n      navigationState: navigation.state,\n      renderIcon: this._renderIcon,\n      renderLabel: this._renderLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      }\n    }));\n  }\n\n}\nTabBarTop.defaultProps = {\n  activeTintColor: '#fff',\n  inactiveTintColor: '#fff',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-tabs/dist/views/MaterialTopTabBar.js"],"names":["React","TabBar","CrossFadeIcon","TabBarTop","PureComponent","_renderLabel","route","position","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","allowFontScaling","props","routes","state","index","indexOf","focused","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","label","getLabelText","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","activeOpacity","inactiveOpacity","icon","render","rest","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport CrossFadeIcon from './CrossFadeIcon';\n\nexport default class TabBarTop extends React.PureComponent {\n  static defaultProps = {\n    activeTintColor: '#fff',\n    inactiveTintColor: '#fff',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true\n  };\n\n  _renderLabel = ({ route }) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling\n    } = this.props;\n\n    if (showLabel === false) {\n      return null;\n    }\n\n    const { routes } = navigation.state;\n    const index = routes.indexOf(route);\n    const focused = index === navigation.state.index;\n\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(inputIndex => inputIndex === index ? activeTintColor : inactiveTintColor);\n    const color = position.interpolate({\n      inputRange,\n      outputRange: outputRange\n    });\n\n    const tintColor = focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabelText({ route });\n\n    if (typeof label === 'string') {\n      return <Animated.Text style={[styles.label, { color }, labelStyle]} allowFontScaling={allowFontScaling}>\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>;\n    }\n    if (typeof label === 'function') {\n      return label({ focused, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = ({ route }) => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      iconStyle\n    } = this.props;\n\n    if (showIcon === false) {\n      return null;\n    }\n\n    const index = navigation.state.routes.indexOf(route);\n\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...navigation.state.routes.map((x, i) => i)];\n    const activeOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map(i => i === index ? 1 : 0)\n    });\n    const inactiveOpacity = position.interpolate({\n      inputRange,\n      outputRange: inputRange.map(i => i === index ? 0 : 1)\n    });\n\n    return <CrossFadeIcon route={route} navigation={navigation} activeOpacity={activeOpacity} inactiveOpacity={inactiveOpacity} activeTintColor={activeTintColor} inactiveTintColor={inactiveTintColor} renderIcon={renderIcon} style={[styles.icon, iconStyle]} />;\n  };\n\n  render() {\n    /* eslint-disable no-unused-vars */\n    const { navigation, renderIcon, getLabelText, ...rest } = this.props;\n\n    return (\n      /* $FlowFixMe */\n      <TabBar {...rest} navigationState={navigation.state} renderIcon={this._renderIcon} renderLabel={this._renderLabel} />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});"]},"metadata":{},"sourceType":"module"}