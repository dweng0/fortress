{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport getNavigationActionCreators from \"./routers/getNavigationActionCreators\";\nimport _getChildNavigation from \"./getChildNavigation\";\nexport default function getNavigation(router, state, dispatch, actionSubscribers, getScreenProps, getCurrentNavigation) {\n  var actions = router.getActionCreators(state, null);\n  var navigation = {\n    actions,\n    router,\n    state,\n    dispatch,\n    getScreenProps,\n    getChildNavigation: childKey => _getChildNavigation(navigation, childKey, getCurrentNavigation),\n    isFocused: childKey => {\n      var {\n        routes,\n        index\n      } = getCurrentNavigation().state;\n\n      if (childKey == null || routes[index].key === childKey) {\n        return true;\n      }\n\n      return false;\n    },\n    addListener: (eventName, handler) => {\n      if (eventName !== 'action') {\n        return {\n          remove: () => {}\n        };\n      }\n\n      actionSubscribers.add(handler);\n      return {\n        remove: () => {\n          actionSubscribers.delete(handler);\n        }\n      };\n    },\n    dangerouslyGetParent: () => null\n  };\n\n  var actionCreators = _objectSpread({}, getNavigationActionCreators(navigation.state), {}, actions);\n\n  Object.keys(actionCreators).forEach(actionName => {\n    navigation[actionName] = function () {\n      return navigation.dispatch(actionCreators[actionName](...arguments));\n    };\n  });\n  return navigation;\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/getNavigation.js"],"names":["getNavigationActionCreators","getChildNavigation","getNavigation","router","state","dispatch","actionSubscribers","getScreenProps","getCurrentNavigation","actions","getActionCreators","navigation","childKey","isFocused","routes","index","key","addListener","eventName","handler","remove","add","delete","dangerouslyGetParent","actionCreators","Object","keys","forEach","actionName"],"mappings":";;;;;;AAAA,OAAOA,2BAAP;AACA,OAAOC,mBAAP;AAEA,eAAe,SAASC,aAAT,CACbC,MADa,EAEbC,KAFa,EAGbC,QAHa,EAIbC,iBAJa,EAKbC,cALa,EAMbC,oBANa,EAOb;AACA,MAAMC,OAAO,GAAGN,MAAM,CAACO,iBAAP,CAAyBN,KAAzB,EAAgC,IAAhC,CAAhB;AAEA,MAAMO,UAAU,GAAG;AACjBF,IAAAA,OADiB;AAEjBN,IAAAA,MAFiB;AAGjBC,IAAAA,KAHiB;AAIjBC,IAAAA,QAJiB;AAKjBE,IAAAA,cALiB;AAMjBN,IAAAA,kBAAkB,EAAEW,QAAQ,IAC1BX,mBAAkB,CAACU,UAAD,EAAaC,QAAb,EAAuBJ,oBAAvB,CAPH;AAQjBK,IAAAA,SAAS,EAAED,QAAQ,IAAI;AACrB,UAAM;AAAEE,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAoBP,oBAAoB,GAAGJ,KAAjD;;AACA,UAAIQ,QAAQ,IAAI,IAAZ,IAAoBE,MAAM,CAACC,KAAD,CAAN,CAAcC,GAAd,KAAsBJ,QAA9C,EAAwD;AACtD,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAdgB;AAejBK,IAAAA,WAAW,EAAE,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AACnC,UAAID,SAAS,KAAK,QAAlB,EAA4B;AAC1B,eAAO;AAAEE,UAAAA,MAAM,EAAE,MAAM,CAAE;AAAlB,SAAP;AACD;;AACDd,MAAAA,iBAAiB,CAACe,GAAlB,CAAsBF,OAAtB;AACA,aAAO;AACLC,QAAAA,MAAM,EAAE,MAAM;AACZd,UAAAA,iBAAiB,CAACgB,MAAlB,CAAyBH,OAAzB;AACD;AAHI,OAAP;AAKD,KAzBgB;AA0BjBI,IAAAA,oBAAoB,EAAE,MAAM;AA1BX,GAAnB;;AA6BA,MAAMC,cAAc,qBACfxB,2BAA2B,CAACW,UAAU,CAACP,KAAZ,CADZ,MAEfK,OAFe,CAApB;;AAKAgB,EAAAA,MAAM,CAACC,IAAP,CAAYF,cAAZ,EAA4BG,OAA5B,CAAoCC,UAAU,IAAI;AAChDjB,IAAAA,UAAU,CAACiB,UAAD,CAAV,GAAyB;AAAA,aACvBjB,UAAU,CAACN,QAAX,CAAoBmB,cAAc,CAACI,UAAD,CAAd,CAA2B,YAA3B,CAApB,CADuB;AAAA,KAAzB;AAED,GAHD;AAKA,SAAOjB,UAAP;AACD","sourcesContent":["import getNavigationActionCreators from './routers/getNavigationActionCreators';\nimport getChildNavigation from './getChildNavigation';\n\nexport default function getNavigation(\n  router,\n  state,\n  dispatch,\n  actionSubscribers,\n  getScreenProps,\n  getCurrentNavigation\n) {\n  const actions = router.getActionCreators(state, null);\n\n  const navigation = {\n    actions,\n    router,\n    state,\n    dispatch,\n    getScreenProps,\n    getChildNavigation: childKey =>\n      getChildNavigation(navigation, childKey, getCurrentNavigation),\n    isFocused: childKey => {\n      const { routes, index } = getCurrentNavigation().state;\n      if (childKey == null || routes[index].key === childKey) {\n        return true;\n      }\n      return false;\n    },\n    addListener: (eventName, handler) => {\n      if (eventName !== 'action') {\n        return { remove: () => {} };\n      }\n      actionSubscribers.add(handler);\n      return {\n        remove: () => {\n          actionSubscribers.delete(handler);\n        },\n      };\n    },\n    dangerouslyGetParent: () => null,\n  };\n\n  const actionCreators = {\n    ...getNavigationActionCreators(navigation.state),\n    ...actions,\n  };\n\n  Object.keys(actionCreators).forEach(actionName => {\n    navigation[actionName] = (...args) =>\n      navigation.dispatch(actionCreators[actionName](...args));\n  });\n\n  return navigation;\n}\n"]},"metadata":{},"sourceType":"module"}