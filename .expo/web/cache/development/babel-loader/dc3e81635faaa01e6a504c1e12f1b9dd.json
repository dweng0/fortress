{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-deprecated-tab-navigator\\\\src\\\\views\\\\TabView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport { NavigationActions, ResourceSavingSceneView } from 'react-navigation';\n\nclass TabView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._handlePageChanged = index => {\n      var {\n        routeName\n      } = this.props.navigation.state.routes[index];\n      this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName\n      }));\n    };\n\n    this._renderScene = (_ref) => {\n      var {\n        route\n      } = _ref;\n      var {\n        screenProps,\n        navigation,\n        descriptors\n      } = this.props;\n      var {\n        lazy,\n        removeClippedSubviews,\n        animationEnabled,\n        swipeEnabled\n      } = this.props.navigationConfig;\n      var descriptor = descriptors[route.key];\n      var focusedIndex = navigation.state.index;\n      var focusedKey = navigation.state.routes[focusedIndex].key;\n      var key = route.key;\n      var TabComponent = descriptor.getComponent();\n      return React.createElement(ResourceSavingSceneView, {\n        lazy: lazy,\n        isFocused: focusedKey === key,\n        removeClippedSubViews: removeClippedSubviews,\n        animationEnabled: animationEnabled,\n        swipeEnabled: swipeEnabled,\n        screenProps: screenProps,\n        component: TabComponent,\n        navigation: navigation,\n        childNavigation: descriptor.navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        }\n      });\n    };\n\n    this._getLabel = (_ref2) => {\n      var {\n        route,\n        tintColor,\n        focused\n      } = _ref2;\n      var {\n        screenProps,\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({\n          tintColor,\n          focused\n        }) : options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    this._getOnPress = (previousScene, _ref3) => {\n      var {\n        route\n      } = _ref3;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      return options.tabBarOnPress;\n    };\n\n    this._getTestIDProps = (_ref4) => {\n      var {\n        route\n      } = _ref4;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({\n        focused\n      }) : options.tabBarTestIDProps;\n    };\n\n    this._renderIcon = (_ref5) => {\n      var {\n        focused,\n        route,\n        tintColor\n      } = _ref5;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor,\n          focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    this._renderTabBar = props => {\n      var {\n        tabBarOptions,\n        tabBarComponent: TabBarComponent,\n        animationEnabled,\n        tabBarPosition\n      } = this.props.navigationConfig;\n\n      if (typeof TabBarComponent === 'undefined') {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, props, tabBarOptions, {\n        tabBarPosition: tabBarPosition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        getLabel: this._getLabel,\n        getTestIDProps: this._getTestIDProps,\n        getOnPress: this._getOnPress,\n        renderIcon: this._renderIcon,\n        animationEnabled: animationEnabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        }\n      }));\n    };\n\n    this._renderPager = props => React.createElement(TabViewPagerPan, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      }\n    }));\n  }\n\n  render() {\n    var {\n      tabBarComponent,\n      tabBarPosition,\n      animationEnabled,\n      configureTransition,\n      initialLayout\n    } = this.props.navigationConfig;\n    var renderHeader;\n    var renderFooter;\n    var renderPager;\n    var {\n      state\n    } = this.props.navigation;\n    var route = state.routes[state.index];\n    var {\n      descriptors\n    } = this.props;\n    var descriptor = descriptors[route.key];\n    var options = descriptor.options;\n    var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n    var swipeEnabled = options.swipeEnabled == null ? this.props.navigationConfig.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (tabBarComponent !== undefined && tabBarVisible) {\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n    }\n\n    if (animationEnabled === false && swipeEnabled === false || typeof configureTransition === 'function') {\n      renderPager = this._renderPager;\n    }\n\n    var props = {\n      initialLayout,\n      animationEnabled,\n      configureTransition,\n      swipeEnabled,\n      renderPager,\n      renderHeader,\n      renderFooter,\n      renderScene: this._renderScene,\n      onIndexChange: this._handlePageChanged,\n      navigationState: this.props.navigation.state,\n      style: styles.container\n    };\n    return React.createElement(TabViewAnimated, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      }\n    }));\n  }\n\n}\n\nTabView.defaultProps = {\n  lazy: true,\n  removedClippedSubviews: true,\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  })\n};\nexport default TabView;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabView.js"],"names":["React","TabViewAnimated","TabViewPagerPan","NavigationActions","ResourceSavingSceneView","TabView","PureComponent","_handlePageChanged","index","routeName","props","navigation","state","routes","dispatch","navigate","_renderScene","route","screenProps","descriptors","lazy","removeClippedSubviews","animationEnabled","swipeEnabled","navigationConfig","descriptor","key","focusedIndex","focusedKey","TabComponent","getComponent","_getLabel","tintColor","focused","options","tabBarLabel","title","_getOnPress","previousScene","tabBarOnPress","_getTestIDProps","tabBarTestIDProps","_renderIcon","tabBarIcon","_renderTabBar","tabBarOptions","tabBarComponent","TabBarComponent","tabBarPosition","_renderPager","render","configureTransition","initialLayout","renderHeader","renderFooter","renderPager","tabBarVisible","undefined","renderScene","onIndexChange","navigationState","style","styles","container","defaultProps","removedClippedSubviews","Platform","select","android","width","height","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport { NavigationActions, ResourceSavingSceneView } from 'react-navigation';\n\nclass TabView extends React.PureComponent {\n  static defaultProps = {\n    lazy: true,\n    removedClippedSubviews: true,\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 },\n    }),\n  };\n\n  _handlePageChanged = index => {\n    let { routeName } = this.props.navigation.state.routes[index];\n    this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n  };\n\n  _renderScene = ({ route }) => {\n    const { screenProps, navigation, descriptors } = this.props;\n    const {\n      lazy,\n      removeClippedSubviews,\n      animationEnabled,\n      swipeEnabled,\n    } = this.props.navigationConfig;\n    const descriptor = descriptors[route.key];\n    const focusedIndex = navigation.state.index;\n    const focusedKey = navigation.state.routes[focusedIndex].key;\n    const key = route.key;\n    const TabComponent = descriptor.getComponent();\n    return (\n      <ResourceSavingSceneView\n        lazy={lazy}\n        isFocused={focusedKey === key}\n        removeClippedSubViews={removeClippedSubviews}\n        animationEnabled={animationEnabled}\n        swipeEnabled={swipeEnabled}\n        screenProps={screenProps}\n        component={TabComponent}\n        navigation={navigation}\n        childNavigation={descriptor.navigation}\n      />\n    );\n  };\n\n  _getLabel = ({ route, tintColor, focused }) => {\n    const { screenProps, descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function'\n        ? options.tabBarLabel({ tintColor, focused })\n        : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _getOnPress = (previousScene, { route }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    return options.tabBarOnPress;\n  };\n\n  _getTestIDProps = ({ route }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    return typeof options.tabBarTestIDProps === 'function'\n      ? options.tabBarTestIDProps({ focused })\n      : options.tabBarTestIDProps;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function'\n        ? options.tabBarIcon({ tintColor, focused })\n        : options.tabBarIcon;\n    }\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const {\n      tabBarOptions,\n      tabBarComponent: TabBarComponent,\n      animationEnabled,\n      tabBarPosition,\n    } = this.props.navigationConfig;\n    if (typeof TabBarComponent === 'undefined') {\n      return null;\n    }\n\n    return (\n      <TabBarComponent\n        {...props}\n        {...tabBarOptions}\n        tabBarPosition={tabBarPosition}\n        screenProps={this.props.screenProps}\n        navigation={this.props.navigation}\n        getLabel={this._getLabel}\n        getTestIDProps={this._getTestIDProps}\n        getOnPress={this._getOnPress}\n        renderIcon={this._renderIcon}\n        animationEnabled={animationEnabled}\n      />\n    );\n  };\n\n  _renderPager = props => <TabViewPagerPan {...props} />;\n\n  render() {\n    const {\n      tabBarComponent,\n      tabBarPosition,\n      animationEnabled,\n      configureTransition,\n      initialLayout,\n    } = this.props.navigationConfig;\n\n    let renderHeader;\n    let renderFooter;\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible =\n      options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    let swipeEnabled =\n      options.swipeEnabled == null\n        ? this.props.navigationConfig.swipeEnabled\n        : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (tabBarComponent !== undefined && tabBarVisible) {\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n    }\n\n    if (\n      (animationEnabled === false && swipeEnabled === false) ||\n      typeof configureTransition === 'function'\n    ) {\n      renderPager = this._renderPager;\n    }\n\n    const props = {\n      initialLayout,\n      animationEnabled,\n      configureTransition,\n      swipeEnabled,\n      renderPager,\n      renderHeader,\n      renderFooter,\n      renderScene: this._renderScene,\n      onIndexChange: this._handlePageChanged,\n      navigationState: this.props.navigation.state,\n      style: styles.container,\n    };\n\n    return <TabViewAnimated {...props} />;\n  }\n}\n\nexport default TabView;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}