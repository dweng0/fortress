{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation\\\\src\\\\navigators\\\\createNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        descriptors: {},\n        screenProps: this.props.screenProps\n      };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      var prevDescriptors = prevState.descriptors;\n      var {\n        navigation,\n        screenProps\n      } = nextProps;\n      var {\n        state\n      } = navigation;\n      var {\n        routes\n      } = state;\n\n      if (typeof routes === 'undefined') {\n        throw new TypeError('No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop');\n      }\n\n      var descriptors = {};\n      routes.forEach(route => {\n        if (prevDescriptors && prevDescriptors[route.key] && route === prevDescriptors[route.key].state && screenProps === prevState.screenProps) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return;\n        }\n\n        var getComponent = router.getComponentForRouteName.bind(null, route.routeName);\n        var childNavigation = navigation.getChildNavigation(route.key);\n        var options = router.getScreenOptions(childNavigation, screenProps);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation\n        };\n      });\n      return {\n        descriptors,\n        screenProps\n      };\n    }\n\n    render() {\n      return React.createElement(NavigatorView, _extends({}, this.props, {\n        screenProps: this.state.screenProps,\n        navigation: this.props.navigation,\n        navigationConfig: navigationConfig,\n        descriptors: this.state.descriptors,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        }\n      }));\n    }\n\n  }\n\n  Navigator.router = router;\n  Navigator.navigationOptions = null;\n  return polyfill(Navigator);\n}\n\nexport default createNavigator;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/navigators/createNavigator.js"],"names":["React","polyfill","createNavigator","NavigatorView","router","navigationConfig","Navigator","Component","state","descriptors","screenProps","props","getDerivedStateFromProps","nextProps","prevState","prevDescriptors","navigation","routes","TypeError","forEach","route","key","getComponent","getComponentForRouteName","bind","routeName","childNavigation","getChildNavigation","options","getScreenOptions","render","navigationOptions"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAEA,SAASC,eAAT,CAAyBC,aAAzB,EAAwCC,MAAxC,EAAgDC,gBAAhD,EAAkE;AAChE,QAAMC,SAAN,SAAwBN,KAAK,CAACO,SAA9B,CAAwC;AAAA;AAAA;AAAA,WAItCC,KAJsC,GAI9B;AACNC,QAAAA,WAAW,EAAE,EADP;AAENC,QAAAA,WAAW,EAAE,KAAKC,KAAL,CAAWD;AAFlB,OAJ8B;AAAA;;AAStC,WAAOE,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,UAAMC,eAAe,GAAGD,SAAS,CAACL,WAAlC;AACA,UAAM;AAAEO,QAAAA,UAAF;AAAcN,QAAAA;AAAd,UAA8BG,SAApC;AACA,UAAM;AAAEL,QAAAA;AAAF,UAAYQ,UAAlB;AACA,UAAM;AAAEC,QAAAA;AAAF,UAAaT,KAAnB;;AACA,UAAI,OAAOS,MAAP,KAAkB,WAAtB,EAAmC;AACjC,cAAM,IAAIC,SAAJ,CACJ,oNADI,CAAN;AAGD;;AAED,UAAMT,WAAW,GAAG,EAApB;AAEAQ,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAI;AACtB,YACEL,eAAe,IACfA,eAAe,CAACK,KAAK,CAACC,GAAP,CADf,IAEAD,KAAK,KAAKL,eAAe,CAACK,KAAK,CAACC,GAAP,CAAf,CAA2Bb,KAFrC,IAGAE,WAAW,KAAKI,SAAS,CAACJ,WAJ5B,EAKE;AACAD,UAAAA,WAAW,CAACW,KAAK,CAACC,GAAP,CAAX,GAAyBN,eAAe,CAACK,KAAK,CAACC,GAAP,CAAxC;AACA;AACD;;AACD,YAAMC,YAAY,GAAGlB,MAAM,CAACmB,wBAAP,CAAgCC,IAAhC,CACnB,IADmB,EAEnBJ,KAAK,CAACK,SAFa,CAArB;AAIA,YAAMC,eAAe,GAAGV,UAAU,CAACW,kBAAX,CAA8BP,KAAK,CAACC,GAApC,CAAxB;AACA,YAAMO,OAAO,GAAGxB,MAAM,CAACyB,gBAAP,CAAwBH,eAAxB,EAAyChB,WAAzC,CAAhB;AACAD,QAAAA,WAAW,CAACW,KAAK,CAACC,GAAP,CAAX,GAAyB;AACvBA,UAAAA,GAAG,EAAED,KAAK,CAACC,GADY;AAEvBC,UAAAA,YAFuB;AAGvBM,UAAAA,OAHuB;AAIvBpB,UAAAA,KAAK,EAAEY,KAJgB;AAKvBJ,UAAAA,UAAU,EAAEU;AALW,SAAzB;AAOD,OAvBD;AAyBA,aAAO;AAAEjB,QAAAA,WAAF;AAAeC,QAAAA;AAAf,OAAP;AACD;;AAEDoB,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,aAAD,eACM,KAAKnB,KADX;AAEE,QAAA,WAAW,EAAE,KAAKH,KAAL,CAAWE,WAF1B;AAGE,QAAA,UAAU,EAAE,KAAKC,KAAL,CAAWK,UAHzB;AAIE,QAAA,gBAAgB,EAAEX,gBAJpB;AAKE,QAAA,WAAW,EAAE,KAAKG,KAAL,CAAWC,WAL1B;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AASD;;AA5DqC;;AAAlCH,EAAAA,SAD0D,CAEvDF,MAFuD,GAE9CA,MAF8C;AAC1DE,EAAAA,SAD0D,CAGvDyB,iBAHuD,GAGnC,IAHmC;AAgEhE,SAAO9B,QAAQ,CAACK,SAAD,CAAf;AACD;;AAED,eAAeJ,eAAf","sourcesContent":["import React from 'react';\nimport { polyfill } from 'react-lifecycles-compat';\n\nfunction createNavigator(NavigatorView, router, navigationConfig) {\n  class Navigator extends React.Component {\n    static router = router;\n    static navigationOptions = null;\n\n    state = {\n      descriptors: {},\n      screenProps: this.props.screenProps,\n    };\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const prevDescriptors = prevState.descriptors;\n      const { navigation, screenProps } = nextProps;\n      const { state } = navigation;\n      const { routes } = state;\n      if (typeof routes === 'undefined') {\n        throw new TypeError(\n          'No \"routes\" found in navigation state. Did you try to pass the navigation prop of a React component to a Navigator child? See https://reactnavigation.org/docs/en/custom-navigators.html#navigator-navigation-prop'\n        );\n      }\n\n      const descriptors = {};\n\n      routes.forEach(route => {\n        if (\n          prevDescriptors &&\n          prevDescriptors[route.key] &&\n          route === prevDescriptors[route.key].state &&\n          screenProps === prevState.screenProps\n        ) {\n          descriptors[route.key] = prevDescriptors[route.key];\n          return;\n        }\n        const getComponent = router.getComponentForRouteName.bind(\n          null,\n          route.routeName\n        );\n        const childNavigation = navigation.getChildNavigation(route.key);\n        const options = router.getScreenOptions(childNavigation, screenProps);\n        descriptors[route.key] = {\n          key: route.key,\n          getComponent,\n          options,\n          state: route,\n          navigation: childNavigation,\n        };\n      });\n\n      return { descriptors, screenProps };\n    }\n\n    render() {\n      return (\n        <NavigatorView\n          {...this.props}\n          screenProps={this.state.screenProps}\n          navigation={this.props.navigation}\n          navigationConfig={navigationConfig}\n          descriptors={this.state.descriptors}\n        />\n      );\n    }\n  }\n\n  return polyfill(Navigator);\n}\n\nexport default createNavigator;\n"]},"metadata":{},"sourceType":"module"}