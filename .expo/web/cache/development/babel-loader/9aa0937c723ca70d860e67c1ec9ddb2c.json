{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\Header\\\\HeaderBackButton.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableItem from \"../TouchableItem\";\nimport defaultBackImage from \"../assets/back-icon.png\";\n\nclass HeaderBackButton extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {};\n\n    this._onTextLayout = e => {\n      if (this.state.initialTextWidth) {\n        return;\n      }\n\n      this.setState({\n        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n      });\n    };\n  }\n\n  _renderBackImage() {\n    var {\n      backImage,\n      title,\n      tintColor\n    } = this.props;\n    var BackImage;\n    var props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && {\n          tintColor\n        }],\n        source: defaultBackImage\n      };\n    }\n\n    return React.createElement(BackImage, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      }\n    }));\n  }\n\n  _maybeRenderTitle() {\n    var {\n      layoutPreset,\n      backTitleVisible,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle\n    } = this.props;\n    var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n    var backButtonTitle = renderTruncated ? truncatedTitle : title;\n    var titleDefaultsToDisabled = layoutPreset === 'left' || Platform.OS === 'android' || typeof backButtonTitle !== 'string';\n\n    if (titleDefaultsToDisabled && !backTitleVisible) {\n      return null;\n    }\n\n    return React.createElement(Text, {\n      accessible: false,\n      onLayout: this._onTextLayout,\n      style: [styles.title, !!tintColor && {\n        color: tintColor\n      }, titleStyle],\n      numberOfLines: 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      }\n    }, backButtonTitle);\n  }\n\n  render() {\n    var {\n      onPress,\n      pressColorAndroid,\n      title\n    } = this.props;\n    var button = React.createElement(TouchableItem, {\n      accessible: true,\n      accessibilityComponentType: \"button\",\n      accessibilityLabel: title,\n      accessibilityTraits: \"button\",\n      testID: \"header-back\",\n      delayPressIn: 0,\n      onPress: onPress,\n      pressColor: pressColorAndroid,\n      style: styles.container,\n      borderless: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      }\n    }, React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      }\n    }, this._renderBackImage(), this._maybeRenderTitle()));\n\n    if (Platform.OS === 'android') {\n      return React.createElement(View, {\n        style: styles.androidButtonWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        }\n      }, button);\n    } else {\n      return button;\n    }\n  }\n\n}\n\nHeaderBackButton.defaultProps = {\n  pressColorAndroid: 'rgba(0, 0, 0, .32)',\n  tintColor: Platform.select({\n    ios: '#037aff'\n  }),\n  truncatedTitle: 'Back'\n};\nvar styles = StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent'\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: Platform.OS === 'ios' ? {\n    height: 21,\n    width: 13,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  } : {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n    transform: [{\n      scaleX: I18nManager.isRTL ? -1 : 1\n    }]\n  },\n  iconWithTitle: Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\nexport default HeaderBackButton;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/Header/HeaderBackButton.js"],"names":["React","TouchableItem","defaultBackImage","HeaderBackButton","PureComponent","state","_onTextLayout","e","initialTextWidth","setState","nativeEvent","layout","x","width","_renderBackImage","backImage","title","tintColor","props","BackImage","isValidElement","Image","style","styles","icon","iconWithTitle","source","_maybeRenderTitle","layoutPreset","backTitleVisible","titleStyle","truncatedTitle","renderTruncated","backButtonTitle","titleDefaultsToDisabled","Platform","OS","color","render","onPress","pressColorAndroid","button","container","androidButtonWrapper","defaultProps","select","ios","StyleSheet","create","margin","backgroundColor","alignItems","flexDirection","fontSize","paddingRight","height","marginLeft","marginRight","marginVertical","resizeMode","transform","scaleX","I18nManager","isRTL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { I18nManager, Image, Text, View, Platform, StyleSheet } from 'react-native';\n\nimport TouchableItem from '../TouchableItem';\n\nimport defaultBackImage from '../assets/back-icon.png';\n\nclass HeaderBackButton extends React.PureComponent {\n  static defaultProps = {\n    pressColorAndroid: 'rgba(0, 0, 0, .32)',\n    tintColor: Platform.select({\n      ios: '#037aff'\n    }),\n    truncatedTitle: 'Back'\n  };\n\n  state = {};\n\n  _onTextLayout = e => {\n    if (this.state.initialTextWidth) {\n      return;\n    }\n    this.setState({\n      initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width\n    });\n  };\n\n  _renderBackImage() {\n    const { backImage, title, tintColor } = this.props;\n\n    let BackImage;\n    let props;\n\n    if (React.isValidElement(backImage)) {\n      return backImage;\n    } else if (backImage) {\n      BackImage = backImage;\n      props = {\n        tintColor,\n        title\n      };\n    } else {\n      BackImage = Image;\n      props = {\n        style: [styles.icon, !!title && styles.iconWithTitle, !!tintColor && { tintColor }],\n        source: defaultBackImage\n      };\n    }\n\n    return <BackImage {...props} />;\n  }\n\n  _maybeRenderTitle() {\n    const {\n      layoutPreset,\n      backTitleVisible,\n      width,\n      title,\n      titleStyle,\n      tintColor,\n      truncatedTitle\n    } = this.props;\n\n    const renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;\n\n    const backButtonTitle = renderTruncated ? truncatedTitle : title;\n\n    // If the left preset is used and we aren't on Android, then we\n    // default to disabling the label\n    const titleDefaultsToDisabled = layoutPreset === 'left' || Platform.OS === 'android' || typeof backButtonTitle !== 'string';\n\n    // If the title is explicitly enabled then we respect that\n    if (titleDefaultsToDisabled && !backTitleVisible) {\n      return null;\n    }\n\n    return <Text accessible={false} onLayout={this._onTextLayout} style={[styles.title, !!tintColor && { color: tintColor }, titleStyle]} numberOfLines={1}>\n        {backButtonTitle}\n      </Text>;\n  }\n\n  render() {\n    const { onPress, pressColorAndroid, title } = this.props;\n\n    let button = <TouchableItem accessible accessibilityComponentType=\"button\" accessibilityLabel={title} accessibilityTraits=\"button\" testID=\"header-back\" delayPressIn={0} onPress={onPress} pressColor={pressColorAndroid} style={styles.container} borderless>\n        <View style={styles.container}>\n          {this._renderBackImage()}\n          {this._maybeRenderTitle()}\n        </View>\n      </TouchableItem>;\n\n    if (Platform.OS === 'android') {\n      return <View style={styles.androidButtonWrapper}>{button}</View>;\n    } else {\n      return button;\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  androidButtonWrapper: {\n    margin: 13,\n    backgroundColor: 'transparent'\n  },\n  container: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: 'transparent'\n  },\n  title: {\n    fontSize: 17,\n    paddingRight: 10\n  },\n  icon: Platform.OS === 'ios' ? {\n    height: 21,\n    width: 13,\n    marginLeft: 9,\n    marginRight: 22,\n    marginVertical: 12,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]\n  } : {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]\n  },\n  iconWithTitle: Platform.OS === 'ios' ? {\n    marginRight: 6\n  } : {}\n});\n\nexport default HeaderBackButton;"]},"metadata":{},"sourceType":"module"}