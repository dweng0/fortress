{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-drawer\\\\dist\\\\views\\\\DrawerView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\nimport { SceneView } from 'react-navigation';\nimport DrawerSidebar from \"./DrawerSidebar\";\nimport DrawerActions from \"../routers/DrawerActions\";\nexport default class DrawerView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n    };\n\n    this._handleDrawerOpen = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_OPENED,\n        key: this.props.navigation.state.key\n      });\n    };\n\n    this._handleDrawerClose = () => {\n      this.props.navigation.dispatch({\n        type: DrawerActions.DRAWER_CLOSED,\n        key: this.props.navigation.state.key\n      });\n    };\n\n    this._updateWidth = () => {\n      var drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n      if (this.state.drawerWidth !== drawerWidth) {\n        this.setState({\n          drawerWidth\n        });\n      }\n    };\n\n    this._renderNavigationView = () => {\n      return React.createElement(DrawerSidebar, _extends({\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        descriptors: this.props.descriptors,\n        contentComponent: this.props.navigationConfig.contentComponent,\n        contentOptions: this.props.navigationConfig.contentOptions,\n        drawerPosition: this.props.navigationConfig.drawerPosition,\n        style: this.props.navigationConfig.style\n      }, this.props.navigationConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        }\n      }));\n    };\n  }\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    var {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    var {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    if (openId !== prevOpenId) {\n      this._drawer.openDrawer();\n    } else if (closeId !== prevCloseId) {\n      this._drawer.closeDrawer();\n    } else if (toggleId !== prevToggleId) {\n      if (isDrawerOpen) {\n        this._drawer.closeDrawer();\n      } else {\n        this._drawer.openDrawer();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  render() {\n    var {\n      state\n    } = this.props.navigation;\n    var activeKey = state.routes[state.index].key;\n    var descriptor = this.props.descriptors[activeKey];\n    var {\n      drawerLockMode\n    } = descriptor.options;\n    return React.createElement(DrawerLayout, {\n      ref: c => {\n        this._drawer = c;\n      },\n      drawerLockMode: drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode,\n      drawerBackgroundColor: this.props.navigationConfig.drawerBackgroundColor,\n      drawerWidth: this.state.drawerWidth,\n      onDrawerOpen: this._handleDrawerOpen,\n      onDrawerClose: this._handleDrawerClose,\n      useNativeAnimations: this.props.navigationConfig.useNativeAnimations,\n      renderNavigationView: this._renderNavigationView,\n      drawerPosition: this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      }\n    }, React.createElement(SceneView, {\n      navigation: descriptor.navigation,\n      screenProps: this.props.screenProps,\n      component: descriptor.getComponent(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-drawer/dist/views/DrawerView.js"],"names":["React","DrawerLayout","SceneView","DrawerSidebar","DrawerActions","DrawerView","PureComponent","state","drawerWidth","props","navigationConfig","_handleDrawerOpen","navigation","dispatch","type","DRAWER_OPENED","key","_handleDrawerClose","DRAWER_CLOSED","_updateWidth","setState","_renderNavigationView","screenProps","descriptors","contentComponent","contentOptions","drawerPosition","style","componentDidMount","Dimensions","addEventListener","componentDidUpdate","prevProps","openId","closeId","toggleId","isDrawerOpen","prevOpenId","prevCloseId","prevToggleId","_drawer","openDrawer","closeDrawer","componentWillUnmount","removeEventListener","render","activeKey","routes","index","descriptor","drawerLockMode","options","c","drawerBackgroundColor","useNativeAnimations","positions","Right","Left","getComponent"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Dimensions } from 'react-native';\nimport DrawerLayout from 'react-native-drawer-layout-polyfill';\nimport { SceneView } from 'react-navigation';\n\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerActions from '../routers/DrawerActions';\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent {\n  state = {\n    drawerWidth: typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth\n  };\n\n  componentDidMount() {\n    Dimensions.addEventListener('change', this._updateWidth);\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      openId,\n      closeId,\n      toggleId,\n      isDrawerOpen\n    } = this.props.navigation.state;\n    const {\n      openId: prevOpenId,\n      closeId: prevCloseId,\n      toggleId: prevToggleId\n    } = prevProps.navigation.state;\n\n    if (openId !== prevOpenId) {\n      this._drawer.openDrawer();\n    } else if (closeId !== prevCloseId) {\n      this._drawer.closeDrawer();\n    } else if (toggleId !== prevToggleId) {\n      if (isDrawerOpen) {\n        this._drawer.closeDrawer();\n      } else {\n        this._drawer.openDrawer();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this._updateWidth);\n  }\n\n  _handleDrawerOpen = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_OPENED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _handleDrawerClose = () => {\n    this.props.navigation.dispatch({\n      type: DrawerActions.DRAWER_CLOSED,\n      key: this.props.navigation.state.key\n    });\n  };\n\n  _updateWidth = () => {\n    const drawerWidth = typeof this.props.navigationConfig.drawerWidth === 'function' ? this.props.navigationConfig.drawerWidth() : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  _renderNavigationView = () => {\n    return <DrawerSidebar screenProps={this.props.screenProps} navigation={this.props.navigation} descriptors={this.props.descriptors} contentComponent={this.props.navigationConfig.contentComponent} contentOptions={this.props.navigationConfig.contentOptions} drawerPosition={this.props.navigationConfig.drawerPosition} style={this.props.navigationConfig.style} {...this.props.navigationConfig} />;\n  };\n\n  render() {\n    const { state } = this.props.navigation;\n    const activeKey = state.routes[state.index].key;\n    const descriptor = this.props.descriptors[activeKey];\n\n    const { drawerLockMode } = descriptor.options;\n\n    return <DrawerLayout ref={c => {\n      this._drawer = c;\n    }} drawerLockMode={drawerLockMode || this.props.screenProps && this.props.screenProps.drawerLockMode || this.props.navigationConfig.drawerLockMode} drawerBackgroundColor={this.props.navigationConfig.drawerBackgroundColor} drawerWidth={this.state.drawerWidth} onDrawerOpen={this._handleDrawerOpen} onDrawerClose={this._handleDrawerClose} useNativeAnimations={this.props.navigationConfig.useNativeAnimations} renderNavigationView={this._renderNavigationView} drawerPosition={this.props.navigationConfig.drawerPosition === 'right' ? DrawerLayout.positions.Right : DrawerLayout.positions.Left}>\n        <SceneView navigation={descriptor.navigation} screenProps={this.props.screenProps} component={descriptor.getComponent()} />\n      </DrawerLayout>;\n  }\n}"]},"metadata":{},"sourceType":"module"}