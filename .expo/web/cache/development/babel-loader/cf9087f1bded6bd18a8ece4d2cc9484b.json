{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-native-tab-view\\\\src\\\\TabViewPagerExperimental.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PagerRendererPropType } from \"./TabViewPropTypes\";\nvar DefaultTransitionSpec = {\n  timing: Animated.spring,\n  tension: 75,\n  friction: 25\n};\nexport default class TabViewPagerExperimental extends React.Component {\n  constructor() {\n    var _this;\n\n    super(...arguments);\n    _this = this;\n\n    this._handleHandlerStateChange = event => {\n      var {\n        GestureHandler\n      } = this.props;\n\n      if (event.nativeEvent.state === GestureHandler.State.BEGIN) {\n        this.props.onSwipeStart && this.props.onSwipeStart();\n      } else if (event.nativeEvent.state === GestureHandler.State.END) {\n        this.props.onSwipeEnd && this.props.onSwipeEnd();\n        var {\n          navigationState,\n          layout,\n          swipeDistanceThreshold = layout.width / 1.75,\n          swipeVelocityThreshold = 150\n        } = this.props;\n        var {\n          translationX,\n          translationY,\n          velocityX,\n          velocityY\n        } = event.nativeEvent;\n        var currentIndex = typeof this._pendingIndex === 'number' ? this._pendingIndex : navigationState.index;\n        var nextIndex = currentIndex;\n\n        if (Math.abs(translationX) > Math.abs(translationY) && Math.abs(velocityX) > Math.abs(velocityY) && (Math.abs(translationX) > swipeDistanceThreshold || Math.abs(velocityX) > swipeVelocityThreshold)) {\n          nextIndex = Math.round(Math.min(Math.max(0, currentIndex - translationX / Math.abs(translationX)), navigationState.routes.length - 1));\n        }\n\n        if (!isFinite(nextIndex) || !this.props.canJumpToTab(this.props.navigationState.routes[nextIndex])) {\n          nextIndex = currentIndex;\n        }\n\n        this._transitionTo(nextIndex, velocityX);\n      }\n    };\n\n    this._transitionTo = function (index, velocity) {\n      var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var offset = -index * _this.props.layout.width;\n\n      if (_this.props.animationEnabled === false || animated === false) {\n        _this.props.panX.setValue(0);\n\n        _this.props.offsetX.setValue(offset);\n\n        return;\n      }\n\n      var {\n        timing\n      } = DefaultTransitionSpec,\n          transitionConfig = _objectWithoutProperties(DefaultTransitionSpec, [\"timing\"]);\n\n      var {\n        useNativeDriver\n      } = _this.props;\n      Animated.parallel([timing(_this.props.panX, _objectSpread({}, transitionConfig, {\n        toValue: 0,\n        velocity,\n        useNativeDriver\n      })), timing(_this.props.offsetX, _objectSpread({}, transitionConfig, {\n        toValue: offset,\n        velocity,\n        useNativeDriver\n      }))]).start((_ref) => {\n        var {\n          finished\n        } = _ref;\n\n        if (finished) {\n          var route = _this.props.navigationState.routes[index];\n\n          _this.props.jumpTo(route.key);\n\n          _this.props.onAnimationEnd && _this.props.onAnimationEnd();\n          _this._pendingIndex = null;\n        }\n      });\n      _this._pendingIndex = index;\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.navigationState.routes !== this.props.navigationState.routes || prevProps.layout.width !== this.props.layout.width) {\n      this._transitionTo(this.props.navigationState.index, undefined, false);\n    } else if (prevProps.navigationState.index !== this.props.navigationState.index) {\n      this._transitionTo(this.props.navigationState.index);\n    }\n  }\n\n  render() {\n    var {\n      GestureHandler,\n      panX,\n      offsetX,\n      layout,\n      navigationState,\n      swipeEnabled,\n      children\n    } = this.props;\n    var {\n      width\n    } = layout;\n    var {\n      routes\n    } = navigationState;\n    var maxTranslate = width * (routes.length - 1);\n    var translateX = Animated.add(panX, offsetX).interpolate({\n      inputRange: [-maxTranslate, 0],\n      outputRange: [-maxTranslate, 0],\n      extrapolate: 'clamp'\n    });\n    return React.createElement(GestureHandler.PanGestureHandler, {\n      enabled: layout.width !== 0 && swipeEnabled !== false,\n      minDeltaX: 10,\n      onGestureEvent: Animated.event([{\n        nativeEvent: {\n          translationX: this.props.panX\n        }\n      }], {\n        useNativeDriver: this.props.useNativeDriver\n      }),\n      onHandlerStateChange: this._handleHandlerStateChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      }\n    }, React.createElement(Animated.View, {\n      style: [styles.sheet, width ? {\n        width: routes.length * width,\n        transform: [{\n          translateX\n        }]\n      } : null],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      }\n    }, React.Children.map(children, (child, i) => React.createElement(View, {\n      key: navigationState.routes[i].key,\n      testID: navigationState.routes[i].testID,\n      style: width ? {\n        width\n      } : i === navigationState.index ? StyleSheet.absoluteFill : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      }\n    }, i === navigationState.index || width ? child : null))));\n  }\n\n}\nTabViewPagerExperimental.propTypes = _objectSpread({}, PagerRendererPropType, {\n  swipeDistanceThreshold: PropTypes.number,\n  swipeVelocityThreshold: PropTypes.number,\n  GestureHandler: PropTypes.object\n});\nTabViewPagerExperimental.defaultProps = {\n  GestureHandler: global.__expo && global.__expo.DangerZone ? global.__expo.DangerZone.GestureHandler : undefined,\n  canJumpToTab: () => true\n};\nvar styles = StyleSheet.create({\n  sheet: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'stretch'\n  }\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-native-tab-view/src/TabViewPagerExperimental.js"],"names":["React","PropTypes","PagerRendererPropType","DefaultTransitionSpec","timing","Animated","spring","tension","friction","TabViewPagerExperimental","Component","_handleHandlerStateChange","event","GestureHandler","props","nativeEvent","state","State","BEGIN","onSwipeStart","END","onSwipeEnd","navigationState","layout","swipeDistanceThreshold","width","swipeVelocityThreshold","translationX","translationY","velocityX","velocityY","currentIndex","_pendingIndex","index","nextIndex","Math","abs","round","min","max","routes","length","isFinite","canJumpToTab","_transitionTo","velocity","animated","offset","animationEnabled","panX","setValue","offsetX","transitionConfig","useNativeDriver","parallel","toValue","start","finished","route","jumpTo","key","onAnimationEnd","componentDidUpdate","prevProps","undefined","render","swipeEnabled","children","maxTranslate","translateX","add","interpolate","inputRange","outputRange","extrapolate","styles","sheet","transform","Children","map","child","i","testID","StyleSheet","absoluteFill","propTypes","number","object","defaultProps","global","__expo","DangerZone","create","flex","flexDirection","alignItems"],"mappings":"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","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, StyleSheet, View } from 'react-native';\nimport { PagerRendererPropType } from './TabViewPropTypes';\nimport type { PagerRendererProps } from './TabViewTypeDefinitions';\n\ntype Props<T> = PagerRendererProps<T> & {\n  swipeDistanceThreshold?: number,\n  swipeVelocityThreshold?: number,\n  GestureHandler: any,\n};\n\nconst DefaultTransitionSpec = {\n  timing: Animated.spring,\n  tension: 75,\n  friction: 25,\n};\n\nexport default class TabViewPagerExperimental<T: *> extends React.Component<\n  Props<T>\n> {\n  static propTypes = {\n    ...PagerRendererPropType,\n    swipeDistanceThreshold: PropTypes.number,\n    swipeVelocityThreshold: PropTypes.number,\n    GestureHandler: PropTypes.object,\n  };\n\n  static defaultProps = {\n    GestureHandler:\n      global.__expo && global.__expo.DangerZone\n        ? global.__expo.DangerZone.GestureHandler\n        : undefined,\n    canJumpToTab: () => true,\n  };\n\n  componentDidUpdate(prevProps: Props<T>) {\n    if (\n      prevProps.navigationState.routes !== this.props.navigationState.routes ||\n      prevProps.layout.width !== this.props.layout.width\n    ) {\n      this._transitionTo(this.props.navigationState.index, undefined, false);\n    } else if (\n      prevProps.navigationState.index !== this.props.navigationState.index\n    ) {\n      this._transitionTo(this.props.navigationState.index);\n    }\n  }\n\n  _handleHandlerStateChange = event => {\n    const { GestureHandler } = this.props;\n\n    if (event.nativeEvent.state === GestureHandler.State.BEGIN) {\n      this.props.onSwipeStart && this.props.onSwipeStart();\n    } else if (event.nativeEvent.state === GestureHandler.State.END) {\n      this.props.onSwipeEnd && this.props.onSwipeEnd();\n\n      const {\n        navigationState,\n        layout,\n        swipeDistanceThreshold = layout.width / 1.75,\n        swipeVelocityThreshold = 150,\n      } = this.props;\n      const {\n        translationX,\n        translationY,\n        velocityX,\n        velocityY,\n      } = event.nativeEvent;\n      const currentIndex =\n        typeof this._pendingIndex === 'number'\n          ? this._pendingIndex\n          : navigationState.index;\n\n      let nextIndex = currentIndex;\n\n      if (\n        Math.abs(translationX) > Math.abs(translationY) &&\n        Math.abs(velocityX) > Math.abs(velocityY) &&\n        (Math.abs(translationX) > swipeDistanceThreshold ||\n          Math.abs(velocityX) > swipeVelocityThreshold)\n      ) {\n        nextIndex = Math.round(\n          Math.min(\n            Math.max(0, currentIndex - translationX / Math.abs(translationX)),\n            navigationState.routes.length - 1\n          )\n        );\n      }\n\n      if (\n        !isFinite(nextIndex) ||\n        !this.props.canJumpToTab(this.props.navigationState.routes[nextIndex])\n      ) {\n        nextIndex = currentIndex;\n      }\n\n      this._transitionTo(nextIndex, velocityX);\n    }\n  };\n\n  _transitionTo = (\n    index: number,\n    velocity?: number,\n    animated?: boolean = true\n  ) => {\n    const offset = -index * this.props.layout.width;\n\n    if (this.props.animationEnabled === false || animated === false) {\n      this.props.panX.setValue(0);\n      this.props.offsetX.setValue(offset);\n      return;\n    }\n\n    const { timing, ...transitionConfig } = DefaultTransitionSpec;\n    const { useNativeDriver } = this.props;\n\n    Animated.parallel([\n      timing(this.props.panX, {\n        ...transitionConfig,\n        toValue: 0,\n        velocity,\n        useNativeDriver,\n      }),\n      timing(this.props.offsetX, {\n        ...transitionConfig,\n        toValue: offset,\n        velocity,\n        useNativeDriver,\n      }),\n    ]).start(({ finished }) => {\n      if (finished) {\n        const route = this.props.navigationState.routes[index];\n        this.props.jumpTo(route.key);\n        this.props.onAnimationEnd && this.props.onAnimationEnd();\n        this._pendingIndex = null;\n      }\n    });\n\n    this._pendingIndex = index;\n  };\n\n  _pendingIndex: ?number;\n\n  render() {\n    const {\n      GestureHandler,\n      panX,\n      offsetX,\n      layout,\n      navigationState,\n      swipeEnabled,\n      children,\n    } = this.props;\n    const { width } = layout;\n    const { routes } = navigationState;\n    const maxTranslate = width * (routes.length - 1);\n    const translateX = Animated.add(panX, offsetX).interpolate({\n      inputRange: [-maxTranslate, 0],\n      outputRange: [-maxTranslate, 0],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <GestureHandler.PanGestureHandler\n        enabled={layout.width !== 0 && swipeEnabled !== false}\n        minDeltaX={10}\n        onGestureEvent={Animated.event(\n          [{ nativeEvent: { translationX: this.props.panX } }],\n          { useNativeDriver: this.props.useNativeDriver }\n        )}\n        onHandlerStateChange={this._handleHandlerStateChange}\n      >\n        <Animated.View\n          style={[\n            styles.sheet,\n            width\n              ? { width: routes.length * width, transform: [{ translateX }] }\n              : null,\n          ]}\n        >\n          {React.Children.map(children, (child, i) => (\n            <View\n              key={navigationState.routes[i].key}\n              testID={navigationState.routes[i].testID}\n              style={\n                width\n                  ? { width }\n                  : i === navigationState.index ? StyleSheet.absoluteFill : null\n              }\n            >\n              {i === navigationState.index || width ? child : null}\n            </View>\n          ))}\n        </Animated.View>\n      </GestureHandler.PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  sheet: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'stretch',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}