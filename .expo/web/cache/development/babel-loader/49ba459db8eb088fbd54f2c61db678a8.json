{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation\\\\src\\\\navigators\\\\createKeyboardAwareNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nexport default ((Navigator, navigatorConfig) => {\n  var _class, _temp;\n\n  return _temp = _class = class KeyboardAwareNavigator extends React.Component {\n    constructor() {\n      super(...arguments);\n      this._previouslyFocusedTextInput = null;\n\n      this._handleGestureBegin = () => {\n        this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureBegin && this.props.onGestureBegin();\n      };\n\n      this._handleGestureCanceled = () => {\n        if (this._previouslyFocusedTextInput) {\n          TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n        }\n\n        this.props.onGestureCanceled && this.props.onGestureCanceled();\n      };\n\n      this._handleGestureFinish = () => {\n        this._previouslyFocusedTextInput = null;\n        this.props.onGestureFinish && this.props.onGestureFinish();\n      };\n\n      this._handleTransitionStart = (transitionProps, prevTransitionProps) => {\n        if (transitionProps.index !== prevTransitionProps.index) {\n          var currentField = TextInput.State.currentlyFocusedField();\n\n          if (currentField) {\n            TextInput.State.blurTextInput(currentField);\n          }\n        }\n\n        var onTransitionStart = this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n        onTransitionStart && onTransitionStart(transitionProps, prevTransitionProps);\n      };\n    }\n\n    render() {\n      return React.createElement(Navigator, _extends({}, this.props, {\n        onGestureBegin: this._handleGestureBegin,\n        onGestureCanceled: this._handleGestureCanceled,\n        onGestureFinish: this._handleGestureFinish,\n        onTransitionStart: this._handleTransitionStart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        }\n      }));\n    }\n\n  }, _class.router = Navigator.router, _temp;\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/navigators/createKeyboardAwareNavigator.js"],"names":["React","Navigator","navigatorConfig","KeyboardAwareNavigator","Component","_previouslyFocusedTextInput","_handleGestureBegin","TextInput","State","currentlyFocusedField","blurTextInput","props","onGestureBegin","_handleGestureCanceled","focusTextInput","onGestureCanceled","_handleGestureFinish","onGestureFinish","_handleTransitionStart","transitionProps","prevTransitionProps","index","currentField","onTransitionStart","render","router"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,gBAAe,CAACC,SAAD,EAAYC,eAAZ;AAAA;;AAAA,0BACb,MAAMC,sBAAN,SAAqCH,KAAK,CAACI,SAA3C,CAAqD;AAAA;AAAA;AAAA,WAEnDC,2BAFmD,GAErB,IAFqB;;AAAA,WAgBnDC,mBAhBmD,GAgB7B,MAAM;AAC1B,aAAKD,2BAAL,GAAmCE,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAAnC;;AACA,YAAI,KAAKJ,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8B,KAAKL,2BAAnC;AACD;;AACD,aAAKM,KAAL,CAAWC,cAAX,IAA6B,KAAKD,KAAL,CAAWC,cAAX,EAA7B;AACD,OAtBkD;;AAAA,WAwBnDC,sBAxBmD,GAwB1B,MAAM;AAC7B,YAAI,KAAKR,2BAAT,EAAsC;AACpCE,UAAAA,SAAS,CAACC,KAAV,CAAgBM,cAAhB,CAA+B,KAAKT,2BAApC;AACD;;AACD,aAAKM,KAAL,CAAWI,iBAAX,IAAgC,KAAKJ,KAAL,CAAWI,iBAAX,EAAhC;AACD,OA7BkD;;AAAA,WA+BnDC,oBA/BmD,GA+B5B,MAAM;AAC3B,aAAKX,2BAAL,GAAmC,IAAnC;AACA,aAAKM,KAAL,CAAWM,eAAX,IAA8B,KAAKN,KAAL,CAAWM,eAAX,EAA9B;AACD,OAlCkD;;AAAA,WAoCnDC,sBApCmD,GAoC1B,CAACC,eAAD,EAAkBC,mBAAlB,KAA0C;AAIjE,YAAID,eAAe,CAACE,KAAhB,KAA0BD,mBAAmB,CAACC,KAAlD,EAAyD;AACvD,cAAMC,YAAY,GAAGf,SAAS,CAACC,KAAV,CAAgBC,qBAAhB,EAArB;;AACA,cAAIa,YAAJ,EAAkB;AAChBf,YAAAA,SAAS,CAACC,KAAV,CAAgBE,aAAhB,CAA8BY,YAA9B;AACD;AACF;;AAED,YAAMC,iBAAiB,GACrB,KAAKZ,KAAL,CAAWY,iBAAX,IAAgCrB,eAAe,CAACqB,iBADlD;AAEAA,QAAAA,iBAAiB,IACfA,iBAAiB,CAACJ,eAAD,EAAkBC,mBAAlB,CADnB;AAED,OAnDkD;AAAA;;AAInDI,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,SAAD,eACM,KAAKb,KADX;AAEE,QAAA,cAAc,EAAE,KAAKL,mBAFvB;AAGE,QAAA,iBAAiB,EAAE,KAAKO,sBAH1B;AAIE,QAAA,eAAe,EAAE,KAAKG,oBAJxB;AAKE,QAAA,iBAAiB,EAAE,KAAKE,sBAL1B;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AASD;;AAdkD,GADxC,SAEJO,MAFI,GAEKxB,SAAS,CAACwB,MAFf;AAAA,CAAf","sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default (Navigator, navigatorConfig) =>\n  class KeyboardAwareNavigator extends React.Component {\n    static router = Navigator.router;\n    _previouslyFocusedTextInput = null;\n\n    render() {\n      return (\n        <Navigator\n          {...this.props}\n          onGestureBegin={this._handleGestureBegin}\n          onGestureCanceled={this._handleGestureCanceled}\n          onGestureFinish={this._handleGestureFinish}\n          onTransitionStart={this._handleTransitionStart}\n        />\n      );\n    }\n\n    _handleGestureBegin = () => {\n      this._previouslyFocusedTextInput = TextInput.State.currentlyFocusedField();\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.blurTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureBegin && this.props.onGestureBegin();\n    };\n\n    _handleGestureCanceled = () => {\n      if (this._previouslyFocusedTextInput) {\n        TextInput.State.focusTextInput(this._previouslyFocusedTextInput);\n      }\n      this.props.onGestureCanceled && this.props.onGestureCanceled();\n    };\n\n    _handleGestureFinish = () => {\n      this._previouslyFocusedTextInput = null;\n      this.props.onGestureFinish && this.props.onGestureFinish();\n    };\n\n    _handleTransitionStart = (transitionProps, prevTransitionProps) => {\n      // TODO: We should not even have received the transition start event\n      // in the case where the index did not change, I believe. We\n      // should revisit this after 2.0 release.\n      if (transitionProps.index !== prevTransitionProps.index) {\n        const currentField = TextInput.State.currentlyFocusedField();\n        if (currentField) {\n          TextInput.State.blurTextInput(currentField);\n        }\n      }\n\n      const onTransitionStart =\n        this.props.onTransitionStart || navigatorConfig.onTransitionStart;\n      onTransitionStart &&\n        onTransitionStart(transitionProps, prevTransitionProps);\n    };\n  };\n"]},"metadata":{},"sourceType":"module"}