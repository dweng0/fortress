{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation\\\\src\\\\views\\\\ResourceSavingSceneView.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport SceneView from \"./SceneView\";\nvar FAR_FAR_AWAY = 3000;\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return {\n        awake: true\n      };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this._mustAlwaysBeVisible = () => {\n      return this.props.animationEnabled || this.props.swipeEnabled;\n    };\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n  }\n\n  render() {\n    var {\n      awake\n    } = this.state;\n\n    var _this$props = this.props,\n        {\n      isFocused,\n      childNavigation,\n      navigation,\n      removeClippedSubviews,\n      lazy\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"isFocused\", \"childNavigation\", \"navigation\", \"removeClippedSubviews\", \"lazy\"]);\n\n    return React.createElement(View, {\n      style: styles.container,\n      collapsable: false,\n      removeClippedSubviews: Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      }\n    }, React.createElement(View, {\n      style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      }\n    }, awake ? React.createElement(SceneView, _extends({}, rest, {\n      navigation: childNavigation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      }\n    })) : null));\n  }\n\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\nexport default polyfill(ResourceSavingSceneView);","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/views/ResourceSavingSceneView.js"],"names":["React","polyfill","SceneView","FAR_FAR_AWAY","ResourceSavingSceneView","PureComponent","getDerivedStateFromProps","nextProps","prevState","isFocused","awake","constructor","props","_mustAlwaysBeVisible","animationEnabled","swipeEnabled","state","lazy","render","childNavigation","navigation","removeClippedSubviews","rest","styles","container","Platform","OS","innerAttached","innerDetached","StyleSheet","create","flex","overflow","top"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,QAAT,QAAyB,yBAAzB;AAEA,OAAOC,SAAP;AAEA,IAAMC,YAAY,GAAG,IAArB;;AAEA,MAAMC,uBAAN,SAAsCJ,KAAK,CAACK,aAA5C,CAA0D;AACxD,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,QAAID,SAAS,CAACE,SAAV,IAAuB,CAACD,SAAS,CAACE,KAAtC,EAA6C;AAC3C,aAAO;AAAEA,QAAAA,KAAK,EAAE;AAAT,OAAP;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF;;AAEDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;;AADiB,SA0CnBC,oBA1CmB,GA0CI,MAAM;AAC3B,aAAO,KAAKD,KAAL,CAAWE,gBAAX,IAA+B,KAAKF,KAAL,CAAWG,YAAjD;AACD,KA5CkB;;AAGjB,SAAKC,KAAL,GAAa;AACXN,MAAAA,KAAK,EAAEE,KAAK,CAACK,IAAN,GAAaL,KAAK,CAACH,SAAnB,GAA+B;AAD3B,KAAb;AAGD;;AAEDS,EAAAA,MAAM,GAAG;AACP,QAAM;AAAER,MAAAA;AAAF,QAAY,KAAKM,KAAvB;;AACA,sBAOI,KAAKJ,KAPT;AAAA,QAAM;AACJH,MAAAA,SADI;AAEJU,MAAAA,eAFI;AAGJC,MAAAA,UAHI;AAIJC,MAAAA,qBAJI;AAKJJ,MAAAA;AALI,KAAN;AAAA,QAMKK,IANL;;AASA,WACE,oBAAC,IAAD;AACE,MAAA,KAAK,EAAEC,MAAM,CAACC,SADhB;AAEE,MAAA,WAAW,EAAE,KAFf;AAGE,MAAA,qBAAqB,EACnBC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GACIL,qBADJ,GAEI,CAACZ,SAAD,IAAcY,qBANtB;AAAA;AAAA;AAAA;AAAA;AAAA,OASE,oBAAC,IAAD;AACE,MAAA,KAAK,EACH,KAAKR,oBAAL,MAA+BJ,SAA/B,GACIc,MAAM,CAACI,aADX,GAEIJ,MAAM,CAACK,aAJf;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGlB,KAAK,GAAG,oBAAC,SAAD,eAAeY,IAAf;AAAqB,MAAA,UAAU,EAAEH,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH,GAA0D,IAPlE,CATF,CADF;AAqBD;;AAjDuD;;AAwD1D,IAAMI,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BL,EAAAA,aAAa,EAAE;AACbI,IAAAA,IAAI,EAAE;AADO,GALgB;AAQ/BH,EAAAA,aAAa,EAAE;AACbG,IAAAA,IAAI,EAAE,CADO;AAEbE,IAAAA,GAAG,EAAE9B;AAFQ;AARgB,CAAlB,CAAf;AAcA,eAAeF,QAAQ,CAACG,uBAAD,CAAvB","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport SceneView from './SceneView';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return { awake: true };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true,\n    };\n  }\n\n  render() {\n    const { awake } = this.state;\n    const {\n      isFocused,\n      childNavigation,\n      navigation,\n      removeClippedSubviews,\n      lazy,\n      ...rest\n    } = this.props;\n\n    return (\n      <View\n        style={styles.container}\n        collapsable={false}\n        removeClippedSubviews={\n          Platform.OS === 'android'\n            ? removeClippedSubviews\n            : !isFocused && removeClippedSubviews\n        }\n      >\n        <View\n          style={\n            this._mustAlwaysBeVisible() || isFocused\n              ? styles.innerAttached\n              : styles.innerDetached\n          }\n        >\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>\n    );\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  innerAttached: {\n    flex: 1,\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n\nexport default polyfill(ResourceSavingSceneView);\n"]},"metadata":{},"sourceType":"module"}