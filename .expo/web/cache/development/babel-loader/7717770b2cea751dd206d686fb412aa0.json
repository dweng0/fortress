{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation\\\\src\\\\createNavigationContainer.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport NavigationActions from \"./NavigationActions\";\nimport getNavigation from \"./getNavigation\";\nimport invariant from \"./utils/invariant\";\nimport docsUrl from \"./utils/docsUrl\";\nimport { urlToPathAndParams } from \"./routers/pathUtils\";\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (isStateful(props)) {\n    return;\n  }\n\n  var {\n    navigation,\n    screenProps\n  } = props,\n      containerProps = _objectWithoutProperties(props, [\"navigation\", \"screenProps\"]);\n\n  var keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n  }\n}\n\nvar _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\nvar _reactNavigationIsHydratingState = false;\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    static getDerivedStateFromProps(nextProps, prevState) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    constructor(props) {\n      var _this;\n\n      super(props);\n      _this = this;\n      this.subs = null;\n      this._actionEventSubscribers = new Set();\n\n      this._handleOpenURL = (_ref) => {\n        var {\n          url\n        } = _ref;\n        var {\n          enableURLHandling,\n          uriPrefix\n        } = this.props;\n\n        if (enableURLHandling === false) {\n          return;\n        }\n\n        var parsedUrl = urlToPathAndParams(url, uriPrefix);\n\n        if (parsedUrl) {\n          var {\n            path,\n            params\n          } = parsedUrl;\n          var action = Component.router.getActionForPathAndParams(path, params);\n\n          if (action) {\n            this.dispatch(action);\n          }\n        }\n      };\n\n      this._persistNavigationState = function () {\n        var _ref2 = _asyncToGenerator(function* (nav) {\n          var {\n            persistenceKey\n          } = _this.props;\n\n          if (!persistenceKey) {\n            return;\n          }\n\n          yield AsyncStorage.setItem(persistenceKey, JSON.stringify(nav));\n        });\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      this.dispatch = action => {\n        if (this.props.navigation) {\n          return this.props.navigation.dispatch(action);\n        }\n\n        this._navState = this._navState || this.state.nav;\n        var lastNavState = this._navState;\n        invariant(lastNavState, 'should be set in constructor if stateful');\n        var reducedState = Component.router.getStateForAction(action, lastNavState);\n        var navState = reducedState === null ? lastNavState : reducedState;\n\n        var dispatchActionEvents = () => {\n          this._actionEventSubscribers.forEach(subscriber => subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState\n          }));\n        };\n\n        if (reducedState === null) {\n          dispatchActionEvents();\n          return true;\n        }\n\n        if (navState !== lastNavState) {\n          this._navState = navState;\n          this.setState({\n            nav: navState\n          }, () => {\n            this._onNavigationStateChange(lastNavState, navState, action);\n\n            dispatchActionEvents();\n\n            this._persistNavigationState(navState);\n          });\n          return true;\n        }\n\n        dispatchActionEvents();\n        return false;\n      };\n\n      this._getScreenProps = () => this.props.screenProps;\n\n      validateProps(props);\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful()) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav: this._isStateful() && !props.persistenceKey ? Component.router.getStateForAction(this._initialAction) : null\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental ? this.props.renderLoadingExperimental() : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      var {\n        navigation,\n        screenProps\n      } = props,\n          containerProps = _objectWithoutProperties(props, [\"navigation\", \"screenProps\"]);\n\n      var keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error('This navigator has both navigation and container props, so it is ' + \"unclear if it should own its own state. Remove props: \\\"\".concat(keys.join(', '), \"\\\" \") + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');\n      }\n    }\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful() && !!process.env.REACT_NAV_LOGGING) {\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav\n          });\n        }\n\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    componentDidMount() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        _this2._isMounted = true;\n\n        if (!_this2._isStateful()) {\n          return;\n        }\n\n        if (__DEV__ && !_this2.props.detached) {\n          if (_statefulContainerCount > 0) {\n            if (Platform.OS === 'ios') {\n              console.warn(\"You should only render one navigator explicitly in your app, and other navigators should by rendered by including them in that navigator. Full details at: \".concat(docsUrl('common-mistakes.html#explicitly-rendering-more-than-one-navigator')));\n            }\n          }\n        }\n\n        _statefulContainerCount++;\n        Linking.addEventListener('url', _this2._handleOpenURL);\n        var {\n          persistenceKey,\n          uriPrefix,\n          enableURLHandling\n        } = _this2.props;\n        var parsedUrl = null;\n        var startupStateJSON = null;\n\n        if (enableURLHandling !== false) {\n          startupStateJSON = persistenceKey && (yield AsyncStorage.getItem(persistenceKey));\n\n          var _url = yield Linking.getInitialURL();\n\n          parsedUrl = _url && urlToPathAndParams(_url, uriPrefix);\n        }\n\n        var action = _this2._initialAction;\n        var startupState = _this2.state.nav;\n\n        if (!startupState) {\n          !!process.env.REACT_NAV_LOGGING && console.log('Init new Navigation State');\n          startupState = Component.router.getStateForAction(action);\n        }\n\n        if (startupStateJSON) {\n          try {\n            startupState = JSON.parse(startupStateJSON);\n            _reactNavigationIsHydratingState = true;\n          } catch (e) {}\n        }\n\n        if (parsedUrl) {\n          var {\n            path,\n            params\n          } = parsedUrl;\n          var urlAction = Component.router.getActionForPathAndParams(path, params);\n\n          if (urlAction) {\n            !!process.env.REACT_NAV_LOGGING && console.log('Applying Navigation Action for Initial URL:', url);\n            action = urlAction;\n            startupState = Component.router.getStateForAction(urlAction, startupState);\n          }\n        }\n\n        var dispatchActions = () => _this2._actionEventSubscribers.forEach(subscriber => subscriber({\n          type: 'action',\n          action,\n          state: _this2.state.nav,\n          lastState: null\n        }));\n\n        if (startupState === _this2.state.nav) {\n          dispatchActions();\n          return;\n        }\n\n        _this2.setState({\n          nav: startupState\n        }, () => {\n          _reactNavigationIsHydratingState = false;\n          dispatchActions();\n        });\n      })();\n    }\n\n    componentDidCatch(e, errorInfo) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn('Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..');\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    render() {\n      var navigation = this.props.navigation;\n\n      if (this._isStateful()) {\n        var navState = this.state.nav;\n\n        if (!navState) {\n          return this._renderLoading();\n        }\n\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(Component.router, navState, this.dispatch, this._actionEventSubscribers, this._getScreenProps, () => this._navigation);\n        }\n\n        navigation = this._navigation;\n      }\n\n      invariant(navigation, 'failed to get navigation');\n      return React.createElement(Component, _extends({}, this.props, {\n        navigation: navigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        }\n      }));\n    }\n\n  }\n\n  NavigationContainer.router = Component.router;\n  NavigationContainer.navigationOptions = null;\n  return polyfill(NavigationContainer);\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/createNavigationContainer.js"],"names":["React","polyfill","NavigationActions","getNavigation","invariant","docsUrl","urlToPathAndParams","isStateful","props","navigation","validateProps","screenProps","containerProps","keys","Object","length","Error","join","_statefulContainerCount","_TESTING_ONLY_reset_container_count","_reactNavigationIsHydratingState","createNavigationContainer","Component","NavigationContainer","getDerivedStateFromProps","nextProps","prevState","constructor","subs","_actionEventSubscribers","Set","_handleOpenURL","url","enableURLHandling","uriPrefix","parsedUrl","path","params","action","router","getActionForPathAndParams","dispatch","_persistNavigationState","nav","persistenceKey","AsyncStorage","setItem","JSON","stringify","_navState","state","lastNavState","reducedState","getStateForAction","navState","dispatchActionEvents","forEach","subscriber","type","lastState","setState","_onNavigationStateChange","_getScreenProps","_initialAction","init","_isStateful","BackHandler","addEventListener","_isMounted","remove","back","_renderLoading","renderLoadingExperimental","_validateProps","prevNav","onNavigationStateChange","process","env","REACT_NAV_LOGGING","console","group","log","groupEnd","newState","componentDidUpdate","componentDidMount","__DEV__","detached","Platform","OS","warn","Linking","startupStateJSON","getItem","getInitialURL","startupState","parse","e","urlAction","dispatchActions","componentDidCatch","errorInfo","componentWillUnmount","removeEventListener","render","_navigation","navigationOptions"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { AsyncStorage, Linking, Platform, BackHandler } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\n\nimport NavigationActions from './NavigationActions';\nimport getNavigation from './getNavigation';\nimport invariant from './utils/invariant';\nimport docsUrl from './utils/docsUrl';\nimport { urlToPathAndParams } from './routers/pathUtils';\n\nfunction isStateful(props) {\n  return !props.navigation;\n}\n\nfunction validateProps(props) {\n  if (isStateful(props)) {\n    return;\n  }\n\n  const { navigation, screenProps, ...containerProps } = props;\n\n  const keys = Object.keys(containerProps);\n\n  if (keys.length !== 0) {\n    throw new Error(\n      'This navigator has both navigation and container props, so it is ' +\n        `unclear if it should own its own state. Remove props: \"${keys.join(\n          ', '\n        )}\" ` +\n        'if the navigator should get its state from the navigation prop. If the ' +\n        'navigator should maintain its own state, do not pass a navigation prop.'\n    );\n  }\n}\n\n// Track the number of stateful container instances. Warn if >0 and not using the\n// detached prop to explicitly acknowledge the behavior. We should deprecated implicit\n// stateful navigation containers in a future release and require a provider style pattern\n// instead in order to eliminate confusion entirely.\nlet _statefulContainerCount = 0;\nexport function _TESTING_ONLY_reset_container_count() {\n  _statefulContainerCount = 0;\n}\n\n// We keep a global flag to catch errors during the state persistence hydrating scenario.\n// The innermost navigator who catches the error will dispatch a new init action.\nlet _reactNavigationIsHydratingState = false;\n// Unfortunate to use global state here, but it seems necessesary for the time\n// being. There seems to be some problems with cascading componentDidCatch\n// handlers. Ideally the inner non-stateful navigator catches the error and\n// re-throws it, to be caught by the top-level stateful navigator.\n\n/**\n * Create an HOC that injects the navigation and manages the navigation state\n * in case it's not passed from above.\n * This allows to use e.g. the StackNavigator and TabNavigator as root-level\n * components.\n */\nexport default function createNavigationContainer(Component) {\n  class NavigationContainer extends React.Component {\n    subs = null;\n\n    static router = Component.router;\n    static navigationOptions = null;\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      validateProps(nextProps);\n      return null;\n    }\n\n    _actionEventSubscribers = new Set();\n\n    constructor(props) {\n      super(props);\n\n      validateProps(props);\n\n      this._initialAction = NavigationActions.init();\n\n      if (this._isStateful()) {\n        this.subs = BackHandler.addEventListener('hardwareBackPress', () => {\n          if (!this._isMounted) {\n            this.subs && this.subs.remove();\n          } else {\n            // dispatch returns true if the action results in a state change,\n            // and false otherwise. This maps well to what BackHandler expects\n            // from a callback -- true if handled, false if not handled\n            return this.dispatch(NavigationActions.back());\n          }\n        });\n      }\n\n      this.state = {\n        nav:\n          this._isStateful() && !props.persistenceKey\n            ? Component.router.getStateForAction(this._initialAction)\n            : null,\n      };\n    }\n\n    _renderLoading() {\n      return this.props.renderLoadingExperimental\n        ? this.props.renderLoadingExperimental()\n        : null;\n    }\n\n    _isStateful() {\n      return isStateful(this.props);\n    }\n\n    _validateProps(props) {\n      if (this._isStateful()) {\n        return;\n      }\n\n      const { navigation, screenProps, ...containerProps } = props;\n\n      const keys = Object.keys(containerProps);\n\n      if (keys.length !== 0) {\n        throw new Error(\n          'This navigator has both navigation and container props, so it is ' +\n            `unclear if it should own its own state. Remove props: \"${keys.join(\n              ', '\n            )}\" ` +\n            'if the navigator should get its state from the navigation prop. If the ' +\n            'navigator should maintain its own state, do not pass a navigation prop.'\n        );\n      }\n    }\n\n    _handleOpenURL = ({ url }) => {\n      const { enableURLHandling, uriPrefix } = this.props;\n      if (enableURLHandling === false) {\n        return;\n      }\n      const parsedUrl = urlToPathAndParams(url, uriPrefix);\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const action = Component.router.getActionForPathAndParams(path, params);\n        if (action) {\n          this.dispatch(action);\n        }\n      }\n    };\n\n    _onNavigationStateChange(prevNav, nav, action) {\n      if (\n        typeof this.props.onNavigationStateChange === 'undefined' &&\n        this._isStateful() &&\n        !!process.env.REACT_NAV_LOGGING\n      ) {\n        /* eslint-disable no-console */\n        if (console.group) {\n          console.group('Navigation Dispatch: ');\n          console.log('Action: ', action);\n          console.log('New State: ', nav);\n          console.log('Last State: ', prevNav);\n          console.groupEnd();\n        } else {\n          console.log('Navigation Dispatch: ', {\n            action,\n            newState: nav,\n            lastState: prevNav,\n          });\n        }\n        /* eslint-enable no-console */\n        return;\n      }\n\n      if (typeof this.props.onNavigationStateChange === 'function') {\n        this.props.onNavigationStateChange(prevNav, nav, action);\n      }\n    }\n\n    componentDidUpdate() {\n      // Clear cached _navState every tick\n      if (this._navState === this.state.nav) {\n        this._navState = null;\n      }\n    }\n\n    async componentDidMount() {\n      this._isMounted = true;\n      if (!this._isStateful()) {\n        return;\n      }\n\n      if (__DEV__ && !this.props.detached) {\n        if (_statefulContainerCount > 0) {\n          // Temporarily only show this on iOS due to this issue:\n          // https://github.com/react-navigation/react-navigation/issues/4196#issuecomment-390827829\n          if (Platform.OS === 'ios') {\n            console.warn(\n              `You should only render one navigator explicitly in your app, and other navigators should by rendered by including them in that navigator. Full details at: ${docsUrl(\n                'common-mistakes.html#explicitly-rendering-more-than-one-navigator'\n              )}`\n            );\n          }\n        }\n      }\n      _statefulContainerCount++;\n      Linking.addEventListener('url', this._handleOpenURL);\n\n      // Pull out anything that can impact state\n      const { persistenceKey, uriPrefix, enableURLHandling } = this.props;\n      let parsedUrl = null;\n      let startupStateJSON = null;\n      if (enableURLHandling !== false) {\n        startupStateJSON =\n          persistenceKey && (await AsyncStorage.getItem(persistenceKey));\n        const url = await Linking.getInitialURL();\n        parsedUrl = url && urlToPathAndParams(url, uriPrefix);\n      }\n\n      // Initialize state. This must be done *after* any async code\n      // so we don't end up with a different value for this.state.nav\n      // due to changes while async function was resolving\n      let action = this._initialAction;\n      let startupState = this.state.nav;\n      if (!startupState) {\n        !!process.env.REACT_NAV_LOGGING &&\n          console.log('Init new Navigation State');\n        startupState = Component.router.getStateForAction(action);\n      }\n\n      // Pull persisted state from AsyncStorage\n      if (startupStateJSON) {\n        try {\n          startupState = JSON.parse(startupStateJSON);\n          _reactNavigationIsHydratingState = true;\n        } catch (e) {}\n      }\n\n      // Pull state out of URL\n      if (parsedUrl) {\n        const { path, params } = parsedUrl;\n        const urlAction = Component.router.getActionForPathAndParams(\n          path,\n          params\n        );\n        if (urlAction) {\n          !!process.env.REACT_NAV_LOGGING &&\n            console.log('Applying Navigation Action for Initial URL:', url);\n          action = urlAction;\n          startupState = Component.router.getStateForAction(\n            urlAction,\n            startupState\n          );\n        }\n      }\n\n      const dispatchActions = () =>\n        this._actionEventSubscribers.forEach(subscriber =>\n          subscriber({\n            type: 'action',\n            action,\n            state: this.state.nav,\n            lastState: null,\n          })\n        );\n\n      if (startupState === this.state.nav) {\n        dispatchActions();\n        return;\n      }\n\n      this.setState({ nav: startupState }, () => {\n        _reactNavigationIsHydratingState = false;\n        dispatchActions();\n      });\n    }\n\n    componentDidCatch(e, errorInfo) {\n      if (_reactNavigationIsHydratingState) {\n        _reactNavigationIsHydratingState = false;\n        console.warn(\n          'Uncaught exception while starting app from persisted navigation state! Trying to render again with a fresh navigation state..'\n        );\n        this.dispatch(NavigationActions.init());\n      } else {\n        throw e;\n      }\n    }\n\n    _persistNavigationState = async nav => {\n      const { persistenceKey } = this.props;\n      if (!persistenceKey) {\n        return;\n      }\n      await AsyncStorage.setItem(persistenceKey, JSON.stringify(nav));\n    };\n\n    componentWillUnmount() {\n      this._isMounted = false;\n      Linking.removeEventListener('url', this._handleOpenURL);\n      this.subs && this.subs.remove();\n\n      if (this._isStateful()) {\n        _statefulContainerCount--;\n      }\n    }\n\n    // Per-tick temporary storage for state.nav\n\n    dispatch = action => {\n      if (this.props.navigation) {\n        return this.props.navigation.dispatch(action);\n      }\n\n      // navState will have the most up-to-date value, because setState sometimes behaves asyncronously\n      this._navState = this._navState || this.state.nav;\n      const lastNavState = this._navState;\n      invariant(lastNavState, 'should be set in constructor if stateful');\n      const reducedState = Component.router.getStateForAction(\n        action,\n        lastNavState\n      );\n      const navState = reducedState === null ? lastNavState : reducedState;\n\n      const dispatchActionEvents = () => {\n        this._actionEventSubscribers.forEach(subscriber =>\n          subscriber({\n            type: 'action',\n            action,\n            state: navState,\n            lastState: lastNavState,\n          })\n        );\n      };\n\n      if (reducedState === null) {\n        // The router will return null when action has been handled and the state hasn't changed.\n        // dispatch returns true when something has been handled.\n        dispatchActionEvents();\n        return true;\n      }\n\n      if (navState !== lastNavState) {\n        // Cache updates to state.nav during the tick to ensure that subsequent calls will not discard this change\n        this._navState = navState;\n        this.setState({ nav: navState }, () => {\n          this._onNavigationStateChange(lastNavState, navState, action);\n          dispatchActionEvents();\n          this._persistNavigationState(navState);\n        });\n        return true;\n      }\n\n      dispatchActionEvents();\n      return false;\n    };\n\n    _getScreenProps = () => this.props.screenProps;\n\n    render() {\n      let navigation = this.props.navigation;\n      if (this._isStateful()) {\n        const navState = this.state.nav;\n        if (!navState) {\n          return this._renderLoading();\n        }\n        if (!this._navigation || this._navigation.state !== navState) {\n          this._navigation = getNavigation(\n            Component.router,\n            navState,\n            this.dispatch,\n            this._actionEventSubscribers,\n            this._getScreenProps,\n            () => this._navigation\n          );\n        }\n        navigation = this._navigation;\n      }\n      invariant(navigation, 'failed to get navigation');\n      return <Component {...this.props} navigation={navigation} />;\n    }\n  }\n\n  return polyfill(NavigationContainer);\n}\n"]},"metadata":{},"sourceType":"module"}