{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-native-tab-view\\\\src\\\\TouchableItem.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nvar LOLLIPOP = 21;\nexport default class TouchableItem extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this._handlePress = () => {\n      global.requestAnimationFrame(this.props.onPress);\n    };\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      style,\n      pressOpacity,\n      pressColor,\n      borderless\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"style\", \"pressOpacity\", \"pressColor\", \"borderless\"]);\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return React.createElement(TouchableNativeFeedback, _extends({}, rest, {\n        onPress: this._handlePress,\n        background: TouchableNativeFeedback.Ripple(pressColor, borderless),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        }\n      }), React.createElement(View, {\n        style: style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        }\n      }, React.Children.only(this.props.children)));\n    } else {\n      return React.createElement(TouchableOpacity, _extends({}, rest, {\n        onPress: this._handlePress,\n        style: style,\n        activeOpacity: pressOpacity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        }\n      }), this.props.children);\n    }\n  }\n\n}\nTouchableItem.propTypes = {\n  onPress: PropTypes.func.isRequired,\n  delayPressIn: PropTypes.number,\n  borderless: PropTypes.bool,\n  pressColor: PropTypes.string,\n  pressOpacity: PropTypes.number,\n  children: PropTypes.node.isRequired\n};\nTouchableItem.defaultProps = {\n  pressColor: 'rgba(255, 255, 255, .4)'\n};","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-native-tab-view/src/TouchableItem.js"],"names":["React","PropTypes","LOLLIPOP","TouchableItem","Component","_handlePress","global","requestAnimationFrame","props","onPress","render","style","pressOpacity","pressColor","borderless","rest","Platform","OS","Version","TouchableNativeFeedback","Ripple","Children","only","children","propTypes","func","isRequired","delayPressIn","number","bool","string","node","defaultProps"],"mappings":";;;;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;AASA,IAAMC,QAAQ,GAAG,EAAjB;AAYA,eAAe,MAAMC,aAAN,SAA4BH,KAAK,CAACI,SAAlC,CAAmD;AAAA;AAAA;;AAAA,SAchEC,YAdgE,GAcjD,MAAM;AACnBC,MAAAA,MAAM,CAACC,qBAAP,CAA6B,KAAKC,KAAL,CAAWC,OAAxC;AACD,KAhB+D;AAAA;;AAkBhEC,EAAAA,MAAM,GAAG;AACP,sBAAiE,KAAKF,KAAtE;AAAA,QAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA,YAAT;AAAuBC,MAAAA,UAAvB;AAAmCC,MAAAA;AAAnC,KAAN;AAAA,QAAwDC,IAAxD;;AAEA,QAAIC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,IAA6BD,QAAQ,CAACE,OAAT,IAAoBhB,QAArD,EAA+D;AAC7D,aACE,oBAAC,uBAAD,eACMa,IADN;AAEE,QAAA,OAAO,EAAE,KAAKV,YAFhB;AAGE,QAAA,UAAU,EAAEc,uBAAuB,CAACC,MAAxB,CAA+BP,UAA/B,EAA2CC,UAA3C,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA,UAKE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEH,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBX,KAAK,CAACqB,QAAN,CAAeC,IAAf,CAAoB,KAAKd,KAAL,CAAWe,QAA/B,CAArB,CALF,CADF;AASD,KAVD,MAUO;AACL,aACE,oBAAC,gBAAD,eACMR,IADN;AAEE,QAAA,OAAO,EAAE,KAAKV,YAFhB;AAGE,QAAA,KAAK,EAAEM,KAHT;AAIE,QAAA,aAAa,EAAEC,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA,UAMG,KAAKJ,KAAL,CAAWe,QANd,CADF;AAUD;AACF;;AA3C+D;AAA7CpB,a,CACZqB,S,GAAY;AACjBf,EAAAA,OAAO,EAAER,SAAS,CAACwB,IAAV,CAAeC,UADP;AAEjBC,EAAAA,YAAY,EAAE1B,SAAS,CAAC2B,MAFP;AAGjBd,EAAAA,UAAU,EAAEb,SAAS,CAAC4B,IAHL;AAIjBhB,EAAAA,UAAU,EAAEZ,SAAS,CAAC6B,MAJL;AAKjBlB,EAAAA,YAAY,EAAEX,SAAS,CAAC2B,MALP;AAMjBL,EAAAA,QAAQ,EAAEtB,SAAS,CAAC8B,IAAV,CAAeL;AANR,C;AADAvB,a,CAUZ6B,Y,GAAe;AACpBnB,EAAAA,UAAU,EAAE;AADQ,C","sourcesContent":["/* @flow */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  Platform,\n  View,\n} from 'react-native';\nimport type { Style } from './TabViewTypeDefinitions';\n\nconst LOLLIPOP = 21;\n\ntype Props = {\n  onPress: Function,\n  delayPressIn?: number,\n  borderless?: boolean,\n  pressColor?: string,\n  pressOpacity?: number,\n  children?: React.Node,\n  style?: Style,\n};\n\nexport default class TouchableItem extends React.Component<Props> {\n  static propTypes = {\n    onPress: PropTypes.func.isRequired,\n    delayPressIn: PropTypes.number,\n    borderless: PropTypes.bool,\n    pressColor: PropTypes.string,\n    pressOpacity: PropTypes.number,\n    children: PropTypes.node.isRequired,\n  };\n\n  static defaultProps = {\n    pressColor: 'rgba(255, 255, 255, .4)',\n  };\n\n  _handlePress = () => {\n    global.requestAnimationFrame(this.props.onPress);\n  };\n\n  render() {\n    const { style, pressOpacity, pressColor, borderless, ...rest } = this.props;\n\n    if (Platform.OS === 'android' && Platform.Version >= LOLLIPOP) {\n      return (\n        <TouchableNativeFeedback\n          {...rest}\n          onPress={this._handlePress}\n          background={TouchableNativeFeedback.Ripple(pressColor, borderless)}\n        >\n          <View style={style}>{React.Children.only(this.props.children)}</View>\n        </TouchableNativeFeedback>\n      );\n    } else {\n      return (\n        <TouchableOpacity\n          {...rest}\n          onPress={this._handlePress}\n          style={style}\n          activeOpacity={pressOpacity}\n        >\n          {this.props.children}\n        </TouchableOpacity>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}