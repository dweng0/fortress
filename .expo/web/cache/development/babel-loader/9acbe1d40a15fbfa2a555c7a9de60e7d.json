{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\StackView\\\\createPointerEventsContainer.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport invariant from \"../../utils/invariant\";\nvar MIN_POSITION_OFFSET = 0.01;\nexport default function createPointerEventsContainer(Component) {\n  class Container extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n\n      this._onComponentRef = component => {\n        this._component = component;\n\n        if (component) {\n          invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');\n        }\n      };\n\n      this._onPositionChange = () => {\n        if (this._component) {\n          var pointerEvents = this._computePointerEvents();\n\n          if (this._pointerEvents !== pointerEvents) {\n            this._pointerEvents = pointerEvents;\n\n            this._component.setNativeProps({\n              pointerEvents\n            });\n          }\n        }\n      };\n\n      this._pointerEvents = this._computePointerEvents();\n    }\n\n    componentWillUnmount() {\n      this._positionListener && this._positionListener.remove();\n    }\n\n    render() {\n      this._bindPosition();\n\n      this._pointerEvents = this._computePointerEvents();\n      return React.createElement(Component, _extends({}, this.props, {\n        pointerEvents: this._pointerEvents,\n        onComponentRef: this._onComponentRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        }\n      }));\n    }\n\n    _bindPosition() {\n      this._positionListener && this._positionListener.remove();\n      this._positionListener = new AnimatedValueSubscription(this.props.position, this._onPositionChange);\n    }\n\n    _computePointerEvents() {\n      var {\n        navigation,\n        position,\n        scene\n      } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      var offset = position.__getAnimatedValue() - navigation.state.index;\n\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n\n  }\n\n  return Container;\n}\n\nclass AnimatedValueSubscription {\n  constructor(value, callback) {\n    this._value = value;\n    this._token = value.addListener(callback);\n  }\n\n  remove() {\n    this._value.removeListener(this._token);\n  }\n\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/StackView/createPointerEventsContainer.js"],"names":["React","invariant","MIN_POSITION_OFFSET","createPointerEventsContainer","Component","Container","constructor","props","context","_onComponentRef","component","_component","setNativeProps","_onPositionChange","pointerEvents","_computePointerEvents","_pointerEvents","componentWillUnmount","_positionListener","remove","render","_bindPosition","AnimatedValueSubscription","position","navigation","scene","isStale","state","index","offset","__getAnimatedValue","Math","abs","value","callback","_value","_token","addListener","removeListener"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP;AAEA,IAAMC,mBAAmB,GAAG,IAA5B;AAOA,eAAe,SAASC,4BAAT,CAAsCC,SAAtC,EAAiD;AAC9D,QAAMC,SAAN,SAAwBL,KAAK,CAACI,SAA9B,CAAwC;AACtCE,IAAAA,WAAW,CAACC,KAAD,EAAQC,OAAR,EAAiB;AAC1B,YAAMD,KAAN,EAAaC,OAAb;;AAD0B,WAgB5BC,eAhB4B,GAgBVC,SAAS,IAAI;AAC7B,aAAKC,UAAL,GAAkBD,SAAlB;;AACA,YAAIA,SAAJ,EAAe;AACbT,UAAAA,SAAS,CAAC,OAAOS,SAAS,CAACE,cAAjB,KAAoC,UAArC,EAAiD,kDAAjD,CAAT;AACD;AACF,OArB2B;;AAAA,WA4B5BC,iBA5B4B,GA4BR,MAAM;AACxB,YAAI,KAAKF,UAAT,EAAqB;AACnB,cAAMG,aAAa,GAAG,KAAKC,qBAAL,EAAtB;;AACA,cAAI,KAAKC,cAAL,KAAwBF,aAA5B,EAA2C;AACzC,iBAAKE,cAAL,GAAsBF,aAAtB;;AACA,iBAAKH,UAAL,CAAgBC,cAAhB,CAA+B;AAAEE,cAAAA;AAAF,aAA/B;AACD;AACF;AACF,OApC2B;;AAE1B,WAAKE,cAAL,GAAsB,KAAKD,qBAAL,EAAtB;AACD;;AAEDE,IAAAA,oBAAoB,GAAG;AACrB,WAAKC,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBC,MAAvB,EAA1B;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,WAAKC,aAAL;;AACA,WAAKL,cAAL,GAAsB,KAAKD,qBAAL,EAAtB;AAEA,aAAO,oBAAC,SAAD,eAAe,KAAKR,KAApB;AAA2B,QAAA,aAAa,EAAE,KAAKS,cAA/C;AAA+D,QAAA,cAAc,EAAE,KAAKP,eAApF;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;;AASDY,IAAAA,aAAa,GAAG;AACd,WAAKH,iBAAL,IAA0B,KAAKA,iBAAL,CAAuBC,MAAvB,EAA1B;AACA,WAAKD,iBAAL,GAAyB,IAAII,yBAAJ,CAA8B,KAAKf,KAAL,CAAWgB,QAAzC,EAAmD,KAAKV,iBAAxD,CAAzB;AACD;;AAYDE,IAAAA,qBAAqB,GAAG;AACtB,UAAM;AAAES,QAAAA,UAAF;AAAcD,QAAAA,QAAd;AAAwBE,QAAAA;AAAxB,UAAkC,KAAKlB,KAA7C;;AAEA,UAAIkB,KAAK,CAACC,OAAN,IAAiBF,UAAU,CAACG,KAAX,CAAiBC,KAAjB,KAA2BH,KAAK,CAACG,KAAtD,EAA6D;AAE3D,eAAOH,KAAK,CAACG,KAAN,GAAcJ,UAAU,CAACG,KAAX,CAAiBC,KAA/B,GAAuC,UAAvC,GAAoD,MAA3D;AACD;;AAED,UAAMC,MAAM,GAAGN,QAAQ,CAACO,kBAAT,KAAgCN,UAAU,CAACG,KAAX,CAAiBC,KAAhE;;AACA,UAAIG,IAAI,CAACC,GAAL,CAASH,MAAT,IAAmB3B,mBAAvB,EAA4C;AAI1C,eAAO,UAAP;AACD;;AAED,aAAO,MAAP;AACD;;AAxDqC;;AA0DxC,SAAOG,SAAP;AACD;;AAED,MAAMiB,yBAAN,CAAgC;AAC9BhB,EAAAA,WAAW,CAAC2B,KAAD,EAAQC,QAAR,EAAkB;AAC3B,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,MAAL,GAAcH,KAAK,CAACI,WAAN,CAAkBH,QAAlB,CAAd;AACD;;AAEDf,EAAAA,MAAM,GAAG;AACP,SAAKgB,MAAL,CAAYG,cAAZ,CAA2B,KAAKF,MAAhC;AACD;;AAR6B","sourcesContent":["import React from 'react';\nimport invariant from '../../utils/invariant';\n\nconst MIN_POSITION_OFFSET = 0.01;\n\n/**\n * Create a higher-order component that automatically computes the\n * `pointerEvents` property for a component whenever navigation position\n * changes.\n */\nexport default function createPointerEventsContainer(Component) {\n  class Container extends React.Component {\n    constructor(props, context) {\n      super(props, context);\n      this._pointerEvents = this._computePointerEvents();\n    }\n\n    componentWillUnmount() {\n      this._positionListener && this._positionListener.remove();\n    }\n\n    render() {\n      this._bindPosition();\n      this._pointerEvents = this._computePointerEvents();\n\n      return <Component {...this.props} pointerEvents={this._pointerEvents} onComponentRef={this._onComponentRef} />;\n    }\n\n    _onComponentRef = component => {\n      this._component = component;\n      if (component) {\n        invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');\n      }\n    };\n\n    _bindPosition() {\n      this._positionListener && this._positionListener.remove();\n      this._positionListener = new AnimatedValueSubscription(this.props.position, this._onPositionChange);\n    }\n\n    _onPositionChange = () => {\n      if (this._component) {\n        const pointerEvents = this._computePointerEvents();\n        if (this._pointerEvents !== pointerEvents) {\n          this._pointerEvents = pointerEvents;\n          this._component.setNativeProps({ pointerEvents });\n        }\n      }\n    };\n\n    _computePointerEvents() {\n      const { navigation, position, scene } = this.props;\n\n      if (scene.isStale || navigation.state.index !== scene.index) {\n        // The scene isn't focused.\n        return scene.index > navigation.state.index ? 'box-only' : 'none';\n      }\n\n      const offset = position.__getAnimatedValue() - navigation.state.index;\n      if (Math.abs(offset) > MIN_POSITION_OFFSET) {\n        // The positon is still away from scene's index.\n        // Scene's children should not receive touches until the position\n        // is close enough to scene's index.\n        return 'box-only';\n      }\n\n      return 'auto';\n    }\n  }\n  return Container;\n}\n\nclass AnimatedValueSubscription {\n  constructor(value, callback) {\n    this._value = value;\n    this._token = value.addListener(callback);\n  }\n\n  remove() {\n    this._value.removeListener(this._token);\n  }\n}"]},"metadata":{},"sourceType":"module"}