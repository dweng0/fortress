{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation\\\\src\\\\views\\\\withNavigationFocus.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from \"../utils/invariant\";\nimport withNavigation from \"./withNavigation\";\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isFocused: props.navigation ? props.navigation.isFocused() : false\n      };\n    }\n\n    componentDidMount() {\n      var {\n        navigation\n      } = this.props;\n      invariant(!!navigation, 'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.');\n      this.subscriptions = [navigation.addListener('didFocus', () => this.setState({\n        isFocused: true\n      })), navigation.addListener('willBlur', () => this.setState({\n        isFocused: false\n      }))];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return React.createElement(Component, _extends({}, this.props, {\n        isFocused: this.state.isFocused,\n        ref: this.props.onRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        }\n      }));\n    }\n\n  }\n\n  ComponentWithNavigationFocus.displayName = \"withNavigationFocus(\".concat(Component.displayName || Component.name, \")\");\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus), Component);\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation/src/views/withNavigationFocus.js"],"names":["React","hoistStatics","invariant","withNavigation","withNavigationFocus","Component","ComponentWithNavigationFocus","constructor","props","state","isFocused","navigation","componentDidMount","subscriptions","addListener","setState","componentWillUnmount","forEach","sub","remove","render","onRef","displayName","name"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP;AACA,OAAOC,cAAP;AAEA,eAAe,SAASC,mBAAT,CAA6BC,SAA7B,EAAwC;AACrD,QAAMC,4BAAN,SAA2CN,KAAK,CAACK,SAAjD,CAA2D;AAIzDE,IAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,YAAMA,KAAN;AAEA,WAAKC,KAAL,GAAa;AACXC,QAAAA,SAAS,EAAEF,KAAK,CAACG,UAAN,GAAmBH,KAAK,CAACG,UAAN,CAAiBD,SAAjB,EAAnB,GAAkD;AADlD,OAAb;AAGD;;AAEDE,IAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAED,QAAAA;AAAF,UAAiB,KAAKH,KAA5B;AACAN,MAAAA,SAAS,CACP,CAAC,CAACS,UADK,EAEP,6JAFO,CAAT;AAKA,WAAKE,aAAL,GAAqB,CACnBF,UAAU,CAACG,WAAX,CAAuB,UAAvB,EAAmC,MACjC,KAAKC,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CADmB,EAInBC,UAAU,CAACG,WAAX,CAAuB,UAAvB,EAAmC,MACjC,KAAKC,QAAL,CAAc;AAAEL,QAAAA,SAAS,EAAE;AAAb,OAAd,CADF,CAJmB,CAArB;AAQD;;AAEDM,IAAAA,oBAAoB,GAAG;AACrB,WAAKH,aAAL,CAAmBI,OAAnB,CAA2BC,GAAG,IAAIA,GAAG,CAACC,MAAJ,EAAlC;AACD;;AAEDC,IAAAA,MAAM,GAAG;AACP,aACE,oBAAC,SAAD,eACM,KAAKZ,KADX;AAEE,QAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,SAFxB;AAGE,QAAA,GAAG,EAAE,KAAKF,KAAL,CAAWa,KAHlB;AAAA;AAAA;AAAA;AAAA;AAAA,SADF;AAOD;;AAzCwD;;AAArDf,EAAAA,4BAD+C,CAE5CgB,WAF4C,iCAEPjB,SAAS,CAACiB,WAAV,IAC1CjB,SAAS,CAACkB,IAHuC;AA6CrD,SAAOtB,YAAY,CAACE,cAAc,CAACG,4BAAD,CAAf,EAA+CD,SAA/C,CAAnB;AACD","sourcesContent":["import React from 'react';\nimport hoistStatics from 'hoist-non-react-statics';\nimport invariant from '../utils/invariant';\nimport withNavigation from './withNavigation';\n\nexport default function withNavigationFocus(Component) {\n  class ComponentWithNavigationFocus extends React.Component {\n    static displayName = `withNavigationFocus(${Component.displayName ||\n      Component.name})`;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        isFocused: props.navigation ? props.navigation.isFocused() : false,\n      };\n    }\n\n    componentDidMount() {\n      const { navigation } = this.props;\n      invariant(\n        !!navigation,\n        'withNavigationFocus can only be used on a view hierarchy of a navigator. The wrapped component is unable to get access to navigation from props or context.'\n      );\n\n      this.subscriptions = [\n        navigation.addListener('didFocus', () =>\n          this.setState({ isFocused: true })\n        ),\n        navigation.addListener('willBlur', () =>\n          this.setState({ isFocused: false })\n        ),\n      ];\n    }\n\n    componentWillUnmount() {\n      this.subscriptions.forEach(sub => sub.remove());\n    }\n\n    render() {\n      return (\n        <Component\n          {...this.props}\n          isFocused={this.state.isFocused}\n          ref={this.props.onRef}\n        />\n      );\n    }\n  }\n\n  return hoistStatics(withNavigation(ComponentWithNavigationFocus), Component);\n}\n"]},"metadata":{},"sourceType":"module"}