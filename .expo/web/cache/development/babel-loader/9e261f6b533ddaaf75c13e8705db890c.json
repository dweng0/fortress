{"ast":null,"code":"import I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport getSceneIndicesForInterpolationInputRange from \"../../utils/getSceneIndicesForInterpolationInputRange\";\n\nfunction forInitial(props) {\n  var {\n    navigation,\n    scene\n  } = props;\n  var focused = navigation.state.index === scene.index;\n  var opacity = focused ? 1 : 0;\n  var translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{\n      translateX: translate\n    }, {\n      translateY: translate\n    }]\n  };\n}\n\nfunction forHorizontal(props) {\n  var {\n    layout,\n    position,\n    scene\n  } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var {\n    first,\n    last\n  } = interpolate;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n    extrapolate: 'clamp'\n  });\n  var width = layout.initWidth;\n  var translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n  var translateY = 0;\n  return {\n    opacity,\n    transform: [{\n      translateX\n    }, {\n      translateY\n    }]\n  };\n}\n\nfunction forVertical(props) {\n  var {\n    layout,\n    position,\n    scene\n  } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var {\n    first,\n    last\n  } = interpolate;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n    extrapolate: 'clamp'\n  });\n  var height = layout.initHeight;\n  var translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n  var translateX = 0;\n  return {\n    opacity,\n    transform: [{\n      translateX\n    }, {\n      translateY\n    }]\n  };\n}\n\nfunction forFadeFromBottomAndroid(props) {\n  var {\n    layout,\n    position,\n    scene\n  } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var {\n    first,\n    last\n  } = interpolate;\n  var index = scene.index;\n  var inputRange = [first, index, last - 0.01, last];\n  var opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n  var translateY = position.interpolate({\n    inputRange,\n    outputRange: [50, 0, 0, 0],\n    extrapolate: 'clamp'\n  });\n  var translateX = 0;\n  return {\n    opacity,\n    transform: [{\n      translateX\n    }, {\n      translateY\n    }]\n  };\n}\n\nfunction forFade(props) {\n  var {\n    layout,\n    position,\n    scene\n  } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n\n  var interpolate = getSceneIndicesForInterpolationInputRange(props);\n  if (!interpolate) return {\n    opacity: 0\n  };\n  var {\n    first,\n    last\n  } = interpolate;\n  var index = scene.index;\n  var opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n  return {\n    opacity\n  };\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  forFade\n};","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/StackView/StackViewStyleInterpolator.js"],"names":["getSceneIndicesForInterpolationInputRange","forInitial","props","navigation","scene","focused","state","index","opacity","translate","transform","translateX","translateY","forHorizontal","layout","position","isMeasured","interpolate","first","last","inputRange","outputRange","extrapolate","width","initWidth","I18nManager","isRTL","forVertical","height","initHeight","forFadeFromBottomAndroid","forFade"],"mappings":"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","sourcesContent":["import { I18nManager } from 'react-native';\nimport getSceneIndicesForInterpolationInputRange from '../../utils/getSceneIndicesForInterpolationInputRange';\n\n/**\n * Utility that builds the style for the card in the cards stack.\n *\n *     +------------+\n *   +-+            |\n * +-+ |            |\n * | | |            |\n * | | |  Focused   |\n * | | |   Card     |\n * | | |            |\n * +-+ |            |\n *   +-+            |\n *     +------------+\n */\n\n/**\n * Render the initial style when the initial layout isn't measured yet.\n */\nfunction forInitial(props) {\n  const { navigation, scene } = props;\n\n  const focused = navigation.state.index === scene.index;\n  const opacity = focused ? 1 : 0;\n  // If not focused, move the scene far away.\n  const translate = focused ? 0 : 1000000;\n  return {\n    opacity,\n    transform: [{ translateX: translate }, { translateY: translate }]\n  };\n}\n\n/**\n * Standard iOS-style slide in from the right.\n */\nfunction forHorizontal(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n    extrapolate: 'clamp'\n  });\n\n  const width = layout.initWidth;\n  const translateX = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: I18nManager.isRTL ? [-width, 0, width * 0.3] : [width, 0, width * -0.3],\n    extrapolate: 'clamp'\n  });\n  const translateY = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }]\n  };\n}\n\n/**\n * Standard iOS-style slide in from the bottom (used for modals).\n */\nfunction forVertical(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, first + 0.01, index, last - 0.01, last],\n    outputRange: [0, 1, 1, 0.85, 0],\n    extrapolate: 'clamp'\n  });\n\n  const height = layout.initHeight;\n  const translateY = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [height, 0, 0],\n    extrapolate: 'clamp'\n  });\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }]\n  };\n}\n\n/**\n * Standard Android-style fade in from the bottom.\n */\nfunction forFadeFromBottomAndroid(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const inputRange = [first, index, last - 0.01, last];\n\n  const opacity = position.interpolate({\n    inputRange,\n    outputRange: [0, 1, 1, 0],\n    extrapolate: 'clamp'\n  });\n\n  const translateY = position.interpolate({\n    inputRange,\n    outputRange: [50, 0, 0, 0],\n    extrapolate: 'clamp'\n  });\n  const translateX = 0;\n\n  return {\n    opacity,\n    transform: [{ translateX }, { translateY }]\n  };\n}\n\n/**\n *  fadeIn and fadeOut\n */\nfunction forFade(props) {\n  const { layout, position, scene } = props;\n\n  if (!layout.isMeasured) {\n    return forInitial(props);\n  }\n  const interpolate = getSceneIndicesForInterpolationInputRange(props);\n\n  if (!interpolate) return { opacity: 0 };\n\n  const { first, last } = interpolate;\n  const index = scene.index;\n  const opacity = position.interpolate({\n    inputRange: [first, index, last],\n    outputRange: [0, 1, 1],\n    extrapolate: 'clamp'\n  });\n\n  return {\n    opacity\n  };\n}\n\nexport default {\n  forHorizontal,\n  forVertical,\n  forFadeFromBottomAndroid,\n  forFade\n};"]},"metadata":{},"sourceType":"module"}