{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-deprecated-tab-navigator\\\\src\\\\views\\\\TabBarTop.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { TabBar } from 'react-native-tab-view';\nimport TabBarIcon from \"./TabBarIcon\";\nexport default class TabBarTop extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._renderLabel = scene => {\n      var {\n        position,\n        tabBarPosition,\n        navigation,\n        activeTintColor,\n        inactiveTintColor,\n        showLabel,\n        upperCaseLabel,\n        labelStyle,\n        allowFontScaling\n      } = this.props;\n\n      if (showLabel === false) {\n        return null;\n      }\n\n      var {\n        index\n      } = scene;\n      var {\n        routes\n      } = navigation.state;\n      var inputRange = [-1, ...routes.map((x, i) => i)];\n      var outputRange = inputRange.map(inputIndex => inputIndex === index ? activeTintColor : inactiveTintColor);\n      var color = position.interpolate({\n        inputRange,\n        outputRange: outputRange\n      });\n      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n      var label = this.props.getLabel(_objectSpread({}, scene, {\n        tintColor\n      }));\n\n      if (typeof label === 'string') {\n        return React.createElement(Animated.Text, {\n          style: [styles.label, {\n            color\n          }, labelStyle],\n          allowFontScaling: allowFontScaling,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          }\n        }, upperCaseLabel ? label.toUpperCase() : label);\n      }\n\n      if (typeof label === 'function') {\n        return label(_objectSpread({}, scene, {\n          tintColor\n        }));\n      }\n\n      return label;\n    };\n\n    this._renderIcon = scene => {\n      var {\n        position,\n        navigation,\n        activeTintColor,\n        inactiveTintColor,\n        renderIcon,\n        showIcon,\n        iconStyle\n      } = this.props;\n\n      if (showIcon === false) {\n        return null;\n      }\n\n      return React.createElement(TabBarIcon, {\n        position: position,\n        navigation: navigation,\n        activeTintColor: activeTintColor,\n        inactiveTintColor: inactiveTintColor,\n        renderIcon: renderIcon,\n        scene: scene,\n        style: [styles.icon, iconStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        }\n      });\n    };\n\n    this._handleOnPress = scene => {\n      var {\n        getOnPress,\n        jumpToIndex,\n        navigation\n      } = this.props;\n      var previousScene = navigation.state.routes[navigation.state.index];\n      var onPress = getOnPress(previousScene, scene);\n\n      if (onPress) {\n        onPress({\n          previousScene,\n          scene,\n          jumpToIndex,\n          defaultHandler: jumpToIndex\n        });\n      } else {\n        jumpToIndex(scene.index);\n      }\n    };\n  }\n\n  render() {\n    var props = this.props;\n    return React.createElement(TabBar, _extends({}, props, {\n      onTabPress: this._handleOnPress,\n      jumpToIndex: () => {},\n      renderIcon: this._renderIcon,\n      renderLabel: this._renderLabel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      }\n    }));\n  }\n\n}\nTabBarTop.defaultProps = {\n  activeTintColor: '#fff',\n  inactiveTintColor: '#fff',\n  showIcon: false,\n  showLabel: true,\n  upperCaseLabel: true,\n  allowFontScaling: true\n};\nvar styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-deprecated-tab-navigator/src/views/TabBarTop.js"],"names":["React","TabBar","TabBarIcon","TabBarTop","PureComponent","_renderLabel","scene","position","tabBarPosition","navigation","activeTintColor","inactiveTintColor","showLabel","upperCaseLabel","labelStyle","allowFontScaling","props","index","routes","state","inputRange","map","x","i","outputRange","inputIndex","color","interpolate","tintColor","focused","label","getLabel","styles","toUpperCase","_renderIcon","renderIcon","showIcon","iconStyle","icon","_handleOnPress","getOnPress","jumpToIndex","previousScene","onPress","defaultHandler","render","defaultProps","StyleSheet","create","height","width","textAlign","fontSize","margin","backgroundColor"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport { TabBar } from 'react-native-tab-view';\nimport TabBarIcon from './TabBarIcon';\n\nexport default class TabBarTop extends React.PureComponent {\n  static defaultProps = {\n    activeTintColor: '#fff',\n    inactiveTintColor: '#fff',\n    showIcon: false,\n    showLabel: true,\n    upperCaseLabel: true,\n    allowFontScaling: true,\n  };\n\n  _renderLabel = scene => {\n    const {\n      position,\n      tabBarPosition,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      showLabel,\n      upperCaseLabel,\n      labelStyle,\n      allowFontScaling,\n    } = this.props;\n    if (showLabel === false) {\n      return null;\n    }\n    const { index } = scene;\n    const { routes } = navigation.state;\n    // Prepend '-1', so there are always at least 2 items in inputRange\n    const inputRange = [-1, ...routes.map((x, i) => i)];\n    const outputRange = inputRange.map(\n      inputIndex => (inputIndex === index ? activeTintColor : inactiveTintColor)\n    );\n    const color = position.interpolate({\n      inputRange,\n      outputRange: outputRange,\n    });\n\n    const tintColor = scene.focused ? activeTintColor : inactiveTintColor;\n    const label = this.props.getLabel({ ...scene, tintColor });\n    if (typeof label === 'string') {\n      return (\n        <Animated.Text\n          style={[styles.label, { color }, labelStyle]}\n          allowFontScaling={allowFontScaling}>\n          {upperCaseLabel ? label.toUpperCase() : label}\n        </Animated.Text>\n      );\n    }\n    if (typeof label === 'function') {\n      return label({ ...scene, tintColor });\n    }\n\n    return label;\n  };\n\n  _renderIcon = scene => {\n    const {\n      position,\n      navigation,\n      activeTintColor,\n      inactiveTintColor,\n      renderIcon,\n      showIcon,\n      iconStyle,\n    } = this.props;\n    if (showIcon === false) {\n      return null;\n    }\n    return (\n      <TabBarIcon\n        position={position}\n        navigation={navigation}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={renderIcon}\n        scene={scene}\n        style={[styles.icon, iconStyle]}\n      />\n    );\n  };\n\n  _handleOnPress = scene => {\n    const { getOnPress, jumpToIndex, navigation } = this.props;\n    const previousScene = navigation.state.routes[navigation.state.index];\n    const onPress = getOnPress(previousScene, scene);\n\n    if (onPress) {\n      // To maintain the same API as `TabbarBottom`, we pass in a `defaultHandler`\n      // even though I don't believe in this case it should be any different\n      // than `jumpToIndex`.\n      onPress({\n        previousScene,\n        scene,\n        jumpToIndex,\n        defaultHandler: jumpToIndex,\n      });\n    } else {\n      jumpToIndex(scene.index);\n    }\n  };\n\n  render() {\n    // TODO: Define full proptypes\n    const props = this.props;\n\n    return (\n      <TabBar\n        {...props}\n        onTabPress={this._handleOnPress}\n        jumpToIndex={() => {}}\n        renderIcon={this._renderIcon}\n        renderLabel={this._renderLabel}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n  },\n  label: {\n    textAlign: 'center',\n    fontSize: 13,\n    margin: 8,\n    backgroundColor: 'transparent',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}