{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\utils\\\\createTabNavigator.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    constructor() {\n      super(...arguments);\n\n      this._renderScene = (_ref) => {\n        var {\n          route\n        } = _ref;\n        var {\n          screenProps,\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var TabComponent = descriptor.getComponent();\n        return React.createElement(SceneView, {\n          screenProps: screenProps,\n          navigation: descriptor.navigation,\n          component: TabComponent,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 10\n          }\n        });\n      };\n\n      this._renderIcon = (_ref2) => {\n        var {\n          route,\n          focused = true,\n          tintColor,\n          horizontal = false\n        } = _ref2;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarIcon) {\n          return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n            focused,\n            tintColor,\n            horizontal\n          }) : options.tabBarIcon;\n        }\n\n        return null;\n      };\n\n      this._getButtonComponent = (_ref3) => {\n        var {\n          route\n        } = _ref3;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarButtonComponent) {\n          return options.tabBarButtonComponent;\n        }\n\n        return null;\n      };\n\n      this._getLabelText = (_ref4) => {\n        var {\n          route\n        } = _ref4;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (options.tabBarLabel) {\n          return options.tabBarLabel;\n        }\n\n        if (typeof options.title === 'string') {\n          return options.title;\n        }\n\n        return route.routeName;\n      };\n\n      this._getAccessibilityLabel = (_ref5) => {\n        var {\n          route\n        } = _ref5;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n\n        if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n          return options.tabBarAccessibilityLabel;\n        }\n\n        var label = this._getLabelText({\n          route\n        });\n\n        if (typeof label === 'string') {\n          return label;\n        }\n      };\n\n      this._getTestID = (_ref6) => {\n        var {\n          route\n        } = _ref6;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var options = descriptor.options;\n        return options.tabBarTestID;\n      };\n\n      this._handleTabPress = (_ref7) => {\n        var {\n          route\n        } = _ref7;\n        this._isTabPress = true;\n        var {\n          descriptors\n        } = this.props;\n        var descriptor = descriptors[route.key];\n        var {\n          navigation,\n          options\n        } = descriptor;\n\n        var defaultHandler = () => {\n          if (navigation.isFocused()) {\n            if (route.hasOwnProperty('index') && route.index > 0) {\n              navigation.dispatch(StackActions.popToTop({\n                key: route.key\n              }));\n            } else {}\n          } else {\n            this._jumpTo(route.routeName);\n          }\n        };\n\n        if (options.tabBarOnPress) {\n          options.tabBarOnPress({\n            navigation,\n            defaultHandler\n          });\n        } else {\n          defaultHandler();\n        }\n      };\n\n      this._handleIndexChange = index => {\n        if (this._isTabPress) {\n          this._isTabPress = false;\n          return;\n        }\n\n        this._jumpTo(this.props.navigation.state.routes[index].routeName);\n      };\n\n      this._handleSwipeStart = () => {\n        this.setState({\n          isSwiping: true\n        });\n      };\n\n      this._handleSwipeEnd = () => {\n        this.setState({\n          isSwiping: false\n        });\n      };\n\n      this._jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({\n        routeName\n      }));\n\n      this._isTabPress = false;\n    }\n\n    render() {\n      var {\n        descriptors,\n        navigation,\n        screenProps\n      } = this.props;\n      var {\n        state\n      } = navigation;\n      var route = state.routes[state.index];\n      var descriptor = descriptors[route.key];\n\n      var options = _objectSpread({}, this.props.navigationConfig, {}, descriptor.options);\n\n      return React.createElement(TabView, _extends({}, options, {\n        getLabelText: this._getLabelText,\n        getButtonComponent: this._getButtonComponent,\n        getAccessibilityLabel: this._getAccessibilityLabel,\n        getTestID: this._getTestID,\n        renderIcon: this._renderIcon,\n        renderScene: this._renderScene,\n        onIndexChange: this._handleIndexChange,\n        onTabPress: this._handleTabPress,\n        navigation: navigation,\n        descriptors: descriptors,\n        screenProps: screenProps,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        }\n      }));\n    }\n\n  }\n\n  return function (routes) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var router = TabRouter(routes, config);\n    var navigator = createNavigator(NavigationView, router, config);\n    return createNavigationContainer(navigator);\n  };\n}","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-tabs/dist/utils/createTabNavigator.js"],"names":["React","TabRouter","StackActions","SceneView","createNavigator","createNavigationContainer","NavigationActions","createTabNavigator","TabView","NavigationView","Component","_renderScene","route","screenProps","descriptors","props","descriptor","key","TabComponent","getComponent","navigation","_renderIcon","focused","tintColor","horizontal","options","tabBarIcon","_getButtonComponent","tabBarButtonComponent","_getLabelText","tabBarLabel","title","routeName","_getAccessibilityLabel","tabBarAccessibilityLabel","label","_getTestID","tabBarTestID","_handleTabPress","_isTabPress","defaultHandler","isFocused","hasOwnProperty","index","dispatch","popToTop","_jumpTo","tabBarOnPress","_handleIndexChange","state","routes","_handleSwipeStart","setState","isSwiping","_handleSwipeEnd","navigate","render","navigationConfig","config","router","navigator"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { TabRouter, StackActions, SceneView, createNavigator, createNavigationContainer, NavigationActions } from 'react-navigation';\n\nexport default function createTabNavigator(TabView) {\n  class NavigationView extends React.Component {\n    _renderScene = ({ route }) => {\n      const { screenProps, descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const TabComponent = descriptor.getComponent();\n      return <SceneView screenProps={screenProps} navigation={descriptor.navigation} component={TabComponent} />;\n    };\n\n    _renderIcon = ({\n      route,\n      focused = true,\n      tintColor,\n      horizontal = false\n    }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ focused, tintColor, horizontal }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _getButtonComponent = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarButtonComponent) {\n        return options.tabBarButtonComponent;\n      }\n\n      return null;\n    };\n\n    _getLabelText = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _getAccessibilityLabel = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      if (typeof options.tabBarAccessibilityLabel !== 'undefined') {\n        return options.tabBarAccessibilityLabel;\n      }\n\n      const label = this._getLabelText({ route });\n\n      if (typeof label === 'string') {\n        return label;\n      }\n    };\n\n    _getTestID = ({ route }) => {\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const options = descriptor.options;\n\n      return options.tabBarTestID;\n    };\n\n    _handleTabPress = ({ route }) => {\n      this._isTabPress = true;\n\n      const { descriptors } = this.props;\n      const descriptor = descriptors[route.key];\n      const { navigation, options } = descriptor;\n\n      const defaultHandler = () => {\n        if (navigation.isFocused()) {\n          if (route.hasOwnProperty('index') && route.index > 0) {\n            // If current tab has a nested navigator, pop to top\n            navigation.dispatch(StackActions.popToTop({ key: route.key }));\n          } else {\n            // TODO: do something to scroll to top\n          }\n        } else {\n          this._jumpTo(route.routeName);\n        }\n      };\n\n      if (options.tabBarOnPress) {\n        options.tabBarOnPress({ navigation, defaultHandler });\n      } else {\n        defaultHandler();\n      }\n    };\n\n    _handleIndexChange = index => {\n      if (this._isTabPress) {\n        this._isTabPress = false;\n        return;\n      }\n\n      this._jumpTo(this.props.navigation.state.routes[index].routeName);\n    };\n\n    _handleSwipeStart = () => {\n      this.setState({ isSwiping: true });\n    };\n\n    _handleSwipeEnd = () => {\n      this.setState({ isSwiping: false });\n    };\n\n    _jumpTo = routeName => this.props.navigation.dispatch(NavigationActions.navigate({ routeName }));\n\n    _isTabPress = false;\n\n    render() {\n      const { descriptors, navigation, screenProps } = this.props;\n      const { state } = navigation;\n      const route = state.routes[state.index];\n      const descriptor = descriptors[route.key];\n      const options = {\n        ...this.props.navigationConfig,\n        ...descriptor.options\n      };\n\n      return <TabView {...options} getLabelText={this._getLabelText} getButtonComponent={this._getButtonComponent} getAccessibilityLabel={this._getAccessibilityLabel} getTestID={this._getTestID} renderIcon={this._renderIcon} renderScene={this._renderScene} onIndexChange={this._handleIndexChange} onTabPress={this._handleTabPress} navigation={navigation} descriptors={descriptors} screenProps={screenProps} />;\n    }\n  }\n\n  return (routes, config = {}) => {\n    const router = TabRouter(routes, config);\n    const navigator = createNavigator(NavigationView, router, config);\n\n    return createNavigationContainer(navigator);\n  };\n}"]},"metadata":{},"sourceType":"module"}