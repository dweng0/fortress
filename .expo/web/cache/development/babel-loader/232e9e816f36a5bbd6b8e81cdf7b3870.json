{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\navigators\\\\createMaterialTopTabNavigator.js\";\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nclass MaterialTabView extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      index: 0,\n      isSwiping: false,\n      loaded: [this.props.navigation.state.index],\n      transitioningFromIndex: null\n    };\n\n    this._renderIcon = (_ref) => {\n      var {\n        focused,\n        route,\n        tintColor\n      } = _ref;\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor,\n          focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    this._renderTabBar = props => {\n      var {\n        state\n      } = this.props.navigation;\n      var route = state.routes[state.index];\n      var {\n        descriptors\n      } = this.props;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var {\n        tabBarComponent: TabBarComponent = MaterialTopTabBar,\n        tabBarPosition,\n        tabBarOptions\n      } = this.props;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: this.props.screenProps,\n        navigation: this.props.navigation,\n        getLabelText: this.props.getLabelText,\n        getAccessibilityLabel: this.props.getAccessibilityLabel,\n        getTestID: this.props.getTestID,\n        renderIcon: this._renderIcon,\n        onTabPress: this.props.onTabPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        }\n      }));\n    };\n\n    this._renderPanPager = props => React.createElement(PagerPan, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      }\n    }));\n\n    this._handleAnimationEnd = () => {\n      var {\n        lazy\n      } = this.props;\n\n      if (lazy) {\n        this.setState({\n          transitioningFromIndex: null,\n          isSwiping: false\n        });\n      }\n    };\n\n    this._handleSwipeStart = () => {\n      var {\n        navigation,\n        lazy\n      } = this.props;\n\n      if (lazy) {\n        this.setState({\n          isSwiping: true,\n          loaded: [...new Set([...this.state.loaded, Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)])]\n        });\n      }\n    };\n\n    this._handleIndexChange = index => {\n      var {\n        animationEnabled,\n        navigation,\n        onIndexChange,\n        lazy\n      } = this.props;\n\n      if (lazy && animationEnabled) {\n        this.setState({\n          transitioningFromIndex: navigation.state.index || 0\n        });\n      }\n\n      onIndexChange(index);\n    };\n\n    this._mustBeVisible = (_ref2) => {\n      var {\n        index,\n        focused\n      } = _ref2;\n      var {\n        animationEnabled,\n        navigation\n      } = this.props;\n      var {\n        isSwiping,\n        transitioningFromIndex\n      } = this.state;\n\n      if (isSwiping) {\n        var isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;\n\n        if (isSibling) {\n          return true;\n        }\n      }\n\n      if (animationEnabled && transitioningFromIndex === index) {\n        return true;\n      }\n\n      return focused;\n    };\n\n    this._renderScene = (_ref3) => {\n      var {\n        route\n      } = _ref3;\n      var {\n        renderScene,\n        descriptors,\n        lazy,\n        optimizationsEnabled\n      } = this.props;\n\n      if (lazy) {\n        var {\n          loaded\n        } = this.state;\n        var {\n          routes\n        } = this.props.navigation.state;\n        var index = routes.findIndex((_ref4) => {\n          var {\n            key\n          } = _ref4;\n          return key === route.key;\n        });\n        var {\n          navigation\n        } = descriptors[route.key];\n\n        var mustBeVisible = this._mustBeVisible({\n          index,\n          focused: navigation.isFocused()\n        });\n\n        if (!loaded.includes(index) && !mustBeVisible) {\n          return React.createElement(View, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148\n            }\n          });\n        }\n\n        if (optimizationsEnabled) {\n          return React.createElement(ResourceSavingScene, {\n            isVisible: mustBeVisible,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152\n            }\n          }, renderScene({\n            route\n          }));\n        }\n      }\n\n      return renderScene({\n        route\n      });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    var {\n      index\n    } = nextProps.navigation.state;\n\n    if (prevState.index === index) {\n      return null;\n    }\n\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index],\n      index\n    };\n  }\n\n  render() {\n    var _this$props = this.props,\n        {\n      navigation,\n      animationEnabled,\n      renderScene,\n      onIndexChange\n    } = _this$props,\n        rest = _objectWithoutProperties(_this$props, [\"navigation\", \"animationEnabled\", \"renderScene\", \"onIndexChange\"]);\n\n    var renderPager;\n    var {\n      state\n    } = this.props.navigation;\n    var route = state.routes[state.index];\n    var {\n      descriptors\n    } = this.props;\n    var descriptor = descriptors[route.key];\n    var options = descriptor.options;\n    var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return React.createElement(TabView, _extends({}, rest, {\n      navigationState: navigation.state,\n      animationEnabled: animationEnabled,\n      swipeEnabled: swipeEnabled,\n      onAnimationEnd: this._handleAnimationEnd,\n      onIndexChange: this._handleIndexChange,\n      onSwipeStart: this._handleSwipeStart,\n      renderPager: renderPager,\n      renderTabBar: this._renderTabBar,\n      renderScene: this._renderScene,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      }\n    }));\n  }\n\n}\n\nMaterialTabView.defaultProps = {\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  }),\n  animationEnabled: true,\n  lazy: false,\n  optimizationsEnabled: false\n};\npolyfill(MaterialTabView);\nexport default createTabNavigator(MaterialTabView);","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js"],"names":["React","polyfill","TabView","PagerPan","createTabNavigator","MaterialTopTabBar","ResourceSavingScene","MaterialTabView","PureComponent","state","index","isSwiping","loaded","props","navigation","transitioningFromIndex","_renderIcon","focused","route","tintColor","descriptors","descriptor","key","options","tabBarIcon","_renderTabBar","routes","tabBarVisible","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","getLabelText","getAccessibilityLabel","getTestID","onTabPress","_renderPanPager","_handleAnimationEnd","lazy","setState","_handleSwipeStart","Set","Math","max","min","length","_handleIndexChange","animationEnabled","onIndexChange","_mustBeVisible","isSibling","_renderScene","renderScene","optimizationsEnabled","findIndex","mustBeVisible","isFocused","includes","getDerivedStateFromProps","nextProps","prevState","render","rest","renderPager","swipeEnabled","defaultProps","initialLayout","Platform","select","android","width","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Platform } from 'react-native';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { TabView, PagerPan } from 'react-native-tab-view';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass MaterialTabView extends React.PureComponent {\n  static defaultProps = {\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 }\n    }),\n    animationEnabled: true,\n    lazy: false,\n    optimizationsEnabled: false\n  };\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { index } = nextProps.navigation.state;\n\n    if (prevState.index === index) {\n      return null;\n    }\n\n    return {\n      loaded: prevState.loaded.includes(index) ? prevState.loaded : [...prevState.loaded, index],\n      index\n    };\n  }\n\n  state = {\n    index: 0,\n    isSwiping: false,\n    loaded: [this.props.navigation.state.index],\n    transitioningFromIndex: null\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ tintColor, focused }) : options.tabBarIcon;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return (\n      /* $FlowFixMe */\n      <TabBarComponent {...tabBarOptions} {...props} tabBarPosition={tabBarPosition} screenProps={this.props.screenProps} navigation={this.props.navigation} getLabelText={this.props.getLabelText} getAccessibilityLabel={this.props.getAccessibilityLabel} getTestID={this.props.getTestID} renderIcon={this._renderIcon} onTabPress={this.props.onTabPress} />\n    );\n  };\n\n  _renderPanPager = props => <PagerPan {...props} />;\n\n  _handleAnimationEnd = () => {\n    const { lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        transitioningFromIndex: null,\n        isSwiping: false\n      });\n    }\n  };\n\n  _handleSwipeStart = () => {\n    const { navigation, lazy } = this.props;\n\n    if (lazy) {\n      this.setState({\n        isSwiping: true,\n        loaded: [...new Set([...this.state.loaded, Math.max(navigation.state.index - 1, 0), Math.min(navigation.state.index + 1, navigation.state.routes.length - 1)])]\n      });\n    }\n  };\n\n  _handleIndexChange = index => {\n    const { animationEnabled, navigation, onIndexChange, lazy } = this.props;\n\n    if (lazy && animationEnabled) {\n      this.setState({\n        transitioningFromIndex: navigation.state.index || 0\n      });\n    }\n\n    onIndexChange(index);\n  };\n\n  _mustBeVisible = ({ index, focused }) => {\n    const { animationEnabled, navigation } = this.props;\n    const { isSwiping, transitioningFromIndex } = this.state;\n\n    if (isSwiping) {\n      const isSibling = navigation.state.index === index - 1 || navigation.state.index === index + 1;\n\n      if (isSibling) {\n        return true;\n      }\n    }\n\n    // The previous tab should remain visible while transitioning\n    if (animationEnabled && transitioningFromIndex === index) {\n      return true;\n    }\n\n    return focused;\n  };\n\n  _renderScene = ({ route }) => {\n    const { renderScene, descriptors, lazy, optimizationsEnabled } = this.props;\n\n    if (lazy) {\n      const { loaded } = this.state;\n      const { routes } = this.props.navigation.state;\n      const index = routes.findIndex(({ key }) => key === route.key);\n      const { navigation } = descriptors[route.key];\n\n      const mustBeVisible = this._mustBeVisible({\n        index,\n        focused: navigation.isFocused()\n      });\n\n      if (!loaded.includes(index) && !mustBeVisible) {\n        return <View />;\n      }\n\n      if (optimizationsEnabled) {\n        return <ResourceSavingScene isVisible={mustBeVisible}>\n            {renderScene({ route })}\n          </ResourceSavingScene>;\n      }\n    }\n\n    return renderScene({ route });\n  };\n\n  render() {\n    const {\n      navigation,\n      animationEnabled,\n      // eslint-disable-next-line no-unused-vars\n      renderScene,\n      // eslint-disable-next-line no-unused-vars\n      onIndexChange,\n      ...rest\n    } = this.props;\n\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return <TabView {...rest} navigationState={navigation.state} animationEnabled={animationEnabled} swipeEnabled={swipeEnabled} onAnimationEnd={this._handleAnimationEnd} onIndexChange={this._handleIndexChange} onSwipeStart={this._handleSwipeStart} renderPager={renderPager} renderTabBar={this._renderTabBar} renderScene={\n    /* $FlowFixMe */\n    this._renderScene} />;\n  }\n}\n\npolyfill(MaterialTabView);\n\nexport default createTabNavigator(MaterialTabView);"]},"metadata":{},"sourceType":"module"}