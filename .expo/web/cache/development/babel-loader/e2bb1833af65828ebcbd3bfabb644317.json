{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\fortress\\\\node_modules\\\\react-navigation-stack\\\\dist\\\\views\\\\Transitioner.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport invariant from \"../utils/invariant\";\nimport NavigationScenesReducer from \"./ScenesReducer\";\nvar DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nclass Transitioner extends React.Component {\n  constructor(props, context) {\n    var _this;\n\n    super(props, context);\n    _this = this;\n\n    this._onLayout = event => {\n      var {\n        height,\n        width\n      } = event.nativeEvent.layout;\n\n      if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {\n        return;\n      }\n\n      var layout = _objectSpread({}, this.state.layout, {\n        initHeight: height,\n        initWidth: width,\n        isMeasured: true\n      });\n\n      layout.height.setValue(height);\n      layout.width.setValue(width);\n\n      var nextState = _objectSpread({}, this.state, {\n        layout\n      });\n\n      this._transitionProps = buildTransitionProps(this.props, nextState);\n      this.setState(nextState);\n    };\n\n    this._onTransitionEnd = () => {\n      if (!this._isMounted) {\n        return;\n      }\n\n      var prevTransitionProps = this._prevTransitionProps;\n      this._prevTransitionProps = null;\n      var scenes = filterStale(this.state.scenes);\n\n      var nextState = _objectSpread({}, this.state, {\n        scenes\n      });\n\n      this._transitionProps = buildTransitionProps(this.props, nextState);\n      this.setState(nextState, _asyncToGenerator(function* () {\n        if (_this.props.onTransitionEnd) {\n          var result = _this.props.onTransitionEnd(_this._transitionProps, prevTransitionProps);\n\n          if (result instanceof Promise) {\n            yield result;\n          }\n        }\n\n        if (_this._queuedTransition) {\n          _this._startTransition(_this._queuedTransition.nextProps, _this._queuedTransition.nextScenes, _this._queuedTransition.indexHasChanged);\n\n          _this._queuedTransition = null;\n        } else {\n          _this._isTransitionRunning = false;\n        }\n      }));\n    };\n\n    var _layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n    this.state = {\n      layout: _layout,\n      position: new Animated.Value(this.props.navigation.state.index),\n      progress: new Animated.Value(1),\n      scenes: NavigationScenesReducer([], this.props.navigation.state, null, this.props.descriptors)\n    };\n    this._prevTransitionProps = null;\n    this._transitionProps = buildTransitionProps(props, this.state);\n    this._isMounted = false;\n    this._isTransitionRunning = false;\n    this._queuedTransition = null;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var nextScenes = NavigationScenesReducer(this.state.scenes, nextProps.navigation.state, this.props.navigation.state, nextProps.descriptors);\n\n    if (!nextProps.navigation.state.isTransitioning) {\n      nextScenes = filterStale(nextScenes);\n    }\n\n    if (nextProps.screenProps !== this.props.screenProps) {\n      this.setState({\n        nextScenes\n      });\n    }\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;\n\n    if (this._isTransitionRunning) {\n      this._queuedTransition = {\n        nextProps,\n        nextScenes,\n        indexHasChanged\n      };\n      return;\n    }\n\n    this._startTransition(nextProps, nextScenes, indexHasChanged);\n  }\n\n  _startTransition(nextProps, nextScenes, indexHasChanged) {\n    var _this2 = this;\n\n    var nextState = _objectSpread({}, this.state, {\n      scenes: nextScenes\n    });\n\n    var {\n      position,\n      progress\n    } = nextState;\n    progress.setValue(0);\n    this._prevTransitionProps = this._transitionProps;\n    this._transitionProps = buildTransitionProps(nextProps, nextState);\n    var toValue = nextProps.navigation.state.index;\n\n    if (!this._transitionProps.navigation.state.isTransitioning) {\n      this.setState(nextState, _asyncToGenerator(function* () {\n        var result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);\n\n        if (result instanceof Promise) {\n          yield result;\n        }\n\n        progress.setValue(1);\n        position.setValue(toValue);\n\n        _this2._onTransitionEnd();\n      }));\n      return;\n    }\n\n    var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;\n\n    var transitionSpec = _objectSpread({}, DefaultTransitionSpec, {}, transitionUserSpec);\n\n    var {\n      timing\n    } = transitionSpec;\n    delete transitionSpec.timing;\n    var positionHasChanged = position.__getValue() !== toValue;\n    var animations = indexHasChanged && positionHasChanged ? [timing(progress, _objectSpread({}, transitionSpec, {\n      toValue: 1\n    })), timing(position, _objectSpread({}, transitionSpec, {\n      toValue: nextProps.navigation.state.index\n    }))] : [];\n    this._isTransitionRunning = true;\n    this.setState(nextState, _asyncToGenerator(function* () {\n      if (nextProps.onTransitionStart) {\n        var result = nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);\n\n        if (result instanceof Promise) {\n          yield result;\n        }\n      }\n\n      Animated.parallel(animations).start(_this2._onTransitionEnd);\n    }));\n  }\n\n  render() {\n    return React.createElement(View, {\n      onLayout: this._onLayout,\n      style: styles.main,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      }\n    }, this.props.render(this._transitionProps, this._prevTransitionProps));\n  }\n\n}\n\nfunction buildTransitionProps(props, state) {\n  var {\n    navigation\n  } = props;\n  var {\n    layout,\n    position,\n    progress,\n    scenes\n  } = state;\n  var scene = scenes.find(isSceneActive);\n  invariant(scene, 'Could not find active scene');\n  return {\n    layout,\n    navigation,\n    position,\n    progress,\n    scenes,\n    scene,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  var filtered = scenes.filter(isSceneNotStale);\n\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nvar styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\nexport default Transitioner;","map":{"version":3,"sources":["G:/projects/fortress/node_modules/react-navigation-stack/dist/views/Transitioner.js"],"names":["React","invariant","NavigationScenesReducer","DefaultTransitionSpec","duration","easing","Easing","inOut","ease","timing","Animated","Transitioner","Component","constructor","props","context","_onLayout","event","height","width","nativeEvent","layout","state","initWidth","initHeight","isMeasured","setValue","nextState","_transitionProps","buildTransitionProps","setState","_onTransitionEnd","_isMounted","prevTransitionProps","_prevTransitionProps","scenes","filterStale","onTransitionEnd","result","Promise","_queuedTransition","_startTransition","nextProps","nextScenes","indexHasChanged","_isTransitionRunning","Value","position","navigation","index","progress","descriptors","componentDidMount","componentWillUnmount","componentWillReceiveProps","isTransitioning","screenProps","toValue","onTransitionStart","transitionUserSpec","configureTransition","transitionSpec","positionHasChanged","__getValue","animations","parallel","start","render","styles","main","scene","find","isSceneActive","isSceneNotStale","isStale","filtered","filter","length","isActive","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Animated, Easing, StyleSheet, View } from 'react-native';\nimport invariant from '../utils/invariant';\n\nimport NavigationScenesReducer from './ScenesReducer';\n\n// Used for all animations unless overriden\nconst DefaultTransitionSpec = {\n  duration: 250,\n  easing: Easing.inOut(Easing.ease),\n  timing: Animated.timing\n};\n\nclass Transitioner extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    // The initial layout isn't measured. Measured layout will be only available\n    // when the component is mounted.\n    const layout = {\n      height: new Animated.Value(0),\n      initHeight: 0,\n      initWidth: 0,\n      isMeasured: false,\n      width: new Animated.Value(0)\n    };\n\n    this.state = {\n      layout,\n      position: new Animated.Value(this.props.navigation.state.index),\n      progress: new Animated.Value(1),\n      scenes: NavigationScenesReducer([], this.props.navigation.state, null, this.props.descriptors)\n    };\n\n    this._prevTransitionProps = null;\n    this._transitionProps = buildTransitionProps(props, this.state);\n    this._isMounted = false;\n    this._isTransitionRunning = false;\n    this._queuedTransition = null;\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  // eslint-disable-next-line react/no-deprecated\n  componentWillReceiveProps(nextProps) {\n    let nextScenes = NavigationScenesReducer(this.state.scenes, nextProps.navigation.state, this.props.navigation.state, nextProps.descriptors);\n    if (!nextProps.navigation.state.isTransitioning) {\n      nextScenes = filterStale(nextScenes);\n    }\n\n    // Update nextScenes when we change screenProps\n    // This is a workaround for https://github.com/react-navigation/react-navigation/issues/4271\n    if (nextProps.screenProps !== this.props.screenProps) {\n      this.setState({ nextScenes });\n    }\n\n    if (nextScenes === this.state.scenes) {\n      return;\n    }\n\n    const indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;\n    if (this._isTransitionRunning) {\n      this._queuedTransition = { nextProps, nextScenes, indexHasChanged };\n      return;\n    }\n\n    this._startTransition(nextProps, nextScenes, indexHasChanged);\n  }\n\n  _startTransition(nextProps, nextScenes, indexHasChanged) {\n    const nextState = {\n      ...this.state,\n      scenes: nextScenes\n    };\n\n    const { position, progress } = nextState;\n\n    progress.setValue(0);\n\n    this._prevTransitionProps = this._transitionProps;\n    this._transitionProps = buildTransitionProps(nextProps, nextState);\n\n    const toValue = nextProps.navigation.state.index;\n\n    if (!this._transitionProps.navigation.state.isTransitioning) {\n      this.setState(nextState, async () => {\n        const result = nextProps.onTransitionStart(this._transitionProps, this._prevTransitionProps);\n        if (result instanceof Promise) {\n          await result;\n        }\n        progress.setValue(1);\n        position.setValue(toValue);\n        this._onTransitionEnd();\n      });\n      return;\n    }\n\n    // get the transition spec.\n    const transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;\n\n    const transitionSpec = {\n      ...DefaultTransitionSpec,\n      ...transitionUserSpec\n    };\n\n    const { timing } = transitionSpec;\n    delete transitionSpec.timing;\n\n    const positionHasChanged = position.__getValue() !== toValue;\n\n    // if swiped back, indexHasChanged == true && positionHasChanged == false\n    const animations = indexHasChanged && positionHasChanged ? [timing(progress, {\n      ...transitionSpec,\n      toValue: 1\n    }), timing(position, {\n      ...transitionSpec,\n      toValue: nextProps.navigation.state.index\n    })] : [];\n\n    // update scenes and play the transition\n    this._isTransitionRunning = true;\n    this.setState(nextState, async () => {\n      if (nextProps.onTransitionStart) {\n        const result = nextProps.onTransitionStart(this._transitionProps, this._prevTransitionProps);\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n      Animated.parallel(animations).start(this._onTransitionEnd);\n    });\n  }\n\n  render() {\n    return <View onLayout={this._onLayout} style={styles.main}>\n        {this.props.render(this._transitionProps, this._prevTransitionProps)}\n      </View>;\n  }\n\n  _onLayout = event => {\n    const { height, width } = event.nativeEvent.layout;\n    if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {\n      return;\n    }\n    const layout = {\n      ...this.state.layout,\n      initHeight: height,\n      initWidth: width,\n      isMeasured: true\n    };\n\n    layout.height.setValue(height);\n    layout.width.setValue(width);\n\n    const nextState = {\n      ...this.state,\n      layout\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n    this.setState(nextState);\n  };\n\n  _onTransitionEnd = () => {\n    if (!this._isMounted) {\n      return;\n    }\n    const prevTransitionProps = this._prevTransitionProps;\n    this._prevTransitionProps = null;\n\n    const scenes = filterStale(this.state.scenes);\n\n    const nextState = {\n      ...this.state,\n      scenes\n    };\n\n    this._transitionProps = buildTransitionProps(this.props, nextState);\n\n    this.setState(nextState, async () => {\n      if (this.props.onTransitionEnd) {\n        const result = this.props.onTransitionEnd(this._transitionProps, prevTransitionProps);\n\n        if (result instanceof Promise) {\n          await result;\n        }\n      }\n\n      if (this._queuedTransition) {\n        this._startTransition(this._queuedTransition.nextProps, this._queuedTransition.nextScenes, this._queuedTransition.indexHasChanged);\n        this._queuedTransition = null;\n      } else {\n        this._isTransitionRunning = false;\n      }\n    });\n  };\n}\n\nfunction buildTransitionProps(props, state) {\n  const { navigation } = props;\n\n  const { layout, position, progress, scenes } = state;\n\n  const scene = scenes.find(isSceneActive);\n\n  invariant(scene, 'Could not find active scene');\n\n  return {\n    layout,\n    navigation,\n    position,\n    progress,\n    scenes,\n    scene,\n    index: scene.index\n  };\n}\n\nfunction isSceneNotStale(scene) {\n  return !scene.isStale;\n}\n\nfunction filterStale(scenes) {\n  const filtered = scenes.filter(isSceneNotStale);\n  if (filtered.length === scenes.length) {\n    return scenes;\n  }\n  return filtered;\n}\n\nfunction isSceneActive(scene) {\n  return scene.isActive;\n}\n\nconst styles = StyleSheet.create({\n  main: {\n    flex: 1\n  }\n});\n\nexport default Transitioner;"]},"metadata":{},"sourceType":"module"}